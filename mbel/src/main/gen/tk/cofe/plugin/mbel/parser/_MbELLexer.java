/*
 * Copyright (C) 2019-2021 cofe
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package tk.cofe.plugin.mbel.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static tk.cofe.plugin.mbel.MbELTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_MbELLexer.flex</tt>
 */
public class _MbELLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17584 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\34\1\35\1\36\2\24\1\37\11\24\1\40\21\24\1\41\1"+
    "\42\24\24\1\7\3\24\1\25\1\43\1\7\4\24\1\44\1\45\4\0\1\46\1\47\1\30\3\24\2"+
    "\50\1\30\1\51\1\52\1\0\1\53\5\24\1\54\2\0\1\5\1\55\1\56\13\24\1\57\1\46\1"+
    "\60\1\61\1\5\1\62\1\30\1\63\1\64\3\24\3\0\1\65\12\24\1\66\1\0\1\67\1\30\1"+
    "\5\1\70\3\24\1\54\1\71\1\23\2\24\1\66\1\72\1\73\1\74\2\30\3\24\1\75\1\24\1"+
    "\50\6\30\2\24\1\33\1\76\2\30\1\77\5\0\1\100\6\24\1\101\2\0\1\102\1\24\1\103"+
    "\1\5\1\7\1\24\1\104\1\105\1\106\2\24\1\107\1\110\1\111\1\112\1\113\1\63\1"+
    "\114\1\103\1\5\1\115\1\116\1\117\1\12\1\106\2\24\1\107\1\120\1\121\1\122\1"+
    "\123\1\124\1\125\1\126\1\5\1\127\1\30\1\117\1\40\1\37\2\24\1\107\1\130\1\111"+
    "\1\46\1\131\1\132\1\30\1\103\1\5\1\43\1\133\1\117\1\105\1\106\2\24\1\107\1"+
    "\130\1\111\1\112\1\123\1\134\1\114\1\103\1\5\1\43\1\30\1\135\1\136\1\137\1"+
    "\140\1\116\1\136\1\24\1\141\1\142\1\143\1\144\1\30\1\126\1\5\1\30\1\43\1\145"+
    "\1\33\1\107\2\24\1\107\1\24\1\146\1\147\1\143\1\150\1\50\1\103\1\5\2\30\1"+
    "\104\1\33\1\107\2\24\1\107\1\151\1\111\1\147\1\143\1\150\1\35\1\103\1\5\1"+
    "\152\1\30\1\145\1\33\1\107\4\24\1\153\1\147\1\154\1\155\1\44\1\103\1\5\1\30"+
    "\1\42\1\156\1\24\1\25\1\42\2\24\1\37\1\157\1\25\1\160\1\161\1\0\1\126\1\5"+
    "\1\162\1\30\1\7\5\24\1\163\1\164\1\165\1\166\1\5\1\167\4\30\1\170\1\171\1"+
    "\172\1\7\1\173\1\174\1\163\1\175\1\176\1\51\1\5\1\177\4\30\1\132\2\30\1\200"+
    "\1\5\1\167\1\201\1\202\1\24\1\7\3\24\1\31\1\45\1\0\1\147\1\203\1\0\1\45\3"+
    "\0\1\204\1\205\7\30\5\24\1\54\1\0\1\206\1\5\1\167\1\66\1\207\1\210\1\211\1"+
    "\212\1\24\1\213\1\214\1\5\1\215\4\24\1\40\1\22\5\24\1\216\51\24\1\137\1\25"+
    "\1\137\5\24\1\137\4\24\1\137\1\25\1\137\1\24\1\25\7\24\1\137\10\24\1\217\4"+
    "\30\2\24\2\30\12\24\2\76\1\7\114\24\1\105\2\24\1\220\2\24\1\50\11\24\1\136"+
    "\1\24\1\132\1\24\1\33\1\221\1\30\2\24\1\221\1\30\2\24\1\222\1\30\1\24\1\33"+
    "\1\223\1\30\6\24\1\224\3\0\1\225\1\226\1\5\1\167\3\30\1\227\1\5\1\167\13\24"+
    "\1\30\1\230\4\24\1\231\10\24\1\76\1\30\3\24\1\25\1\0\1\2\1\0\1\2\1\126\1\5"+
    "\3\24\1\76\1\31\1\30\5\24\1\115\3\24\1\27\1\5\1\167\4\30\2\24\1\165\1\2\6"+
    "\24\1\203\1\166\3\0\1\112\1\5\1\167\1\5\1\167\1\44\1\30\1\0\1\51\10\30\1\232"+
    "\5\24\1\224\1\0\1\232\1\115\1\5\1\167\1\30\1\233\1\2\1\30\1\234\3\24\1\102"+
    "\1\211\1\5\1\70\4\24\1\66\1\0\1\2\1\30\4\24\1\224\2\0\1\30\1\5\1\235\1\5\1"+
    "\70\3\24\1\76\1\24\1\132\10\30\1\236\2\0\1\237\1\240\1\200\30\24\7\0\1\241"+
    "\42\24\2\76\4\24\2\76\1\24\1\242\3\24\1\76\6\24\1\33\1\176\1\243\1\31\1\244"+
    "\1\115\1\24\1\31\1\243\1\31\1\245\1\246\3\30\1\247\1\30\1\44\1\132\1\30\1"+
    "\250\1\251\1\147\1\0\1\43\1\44\2\30\1\24\1\31\4\24\2\30\1\0\1\204\1\252\1"+
    "\0\1\253\1\30\1\254\1\42\1\157\1\255\1\32\1\256\1\24\1\257\1\260\1\261\2\30"+
    "\5\24\1\132\116\30\5\24\1\25\5\24\1\25\20\24\1\31\1\262\1\263\1\30\4\24\1"+
    "\40\1\22\7\24\1\44\1\30\1\63\2\24\1\25\1\30\10\25\4\0\5\30\1\44\72\30\1\264"+
    "\3\30\1\7\1\213\1\255\1\31\1\7\11\24\1\25\1\265\1\7\12\24\1\216\1\260\4\24"+
    "\1\25\1\7\12\24\1\25\2\30\3\24\1\50\6\30\170\24\1\76\11\30\75\24\1\50\2\30"+
    "\21\24\1\31\10\30\5\24\1\76\41\24\1\31\2\24\1\5\1\266\2\30\5\24\1\165\1\77"+
    "\1\267\3\24\1\66\12\24\1\200\3\30\1\44\1\24\1\42\14\24\1\106\3\24\1\25\1\24"+
    "\7\30\1\44\1\24\1\270\1\271\2\24\1\54\2\30\1\132\6\24\1\115\1\30\1\272\5\24"+
    "\1\224\1\0\1\51\1\30\1\5\1\167\2\0\1\272\1\273\1\5\1\70\2\24\1\66\1\51\2\24"+
    "\1\165\1\0\1\2\1\30\3\24\1\31\1\100\5\24\1\54\1\0\1\253\1\44\1\5\1\167\1\274"+
    "\1\24\1\5\1\275\5\24\1\102\1\166\1\30\1\271\1\276\1\5\1\167\2\24\1\25\1\277"+
    "\6\24\1\210\1\300\1\231\2\30\1\301\1\24\1\54\1\302\1\30\3\303\1\30\2\25\5"+
    "\24\1\216\1\76\1\30\16\24\1\54\1\304\1\5\1\167\64\24\1\115\1\30\2\24\1\25"+
    "\1\305\5\24\1\115\40\30\55\24\1\76\15\24\1\27\4\30\1\25\1\30\1\305\1\306\1"+
    "\24\1\107\1\25\1\176\1\307\15\24\1\27\3\30\1\305\54\24\1\76\2\30\10\24\1\42"+
    "\6\24\5\30\1\24\1\31\2\0\2\30\2\0\1\116\2\30\1\260\3\30\1\43\1\33\20\24\1"+
    "\310\1\250\1\30\1\5\1\167\1\7\2\24\1\12\1\7\2\24\1\50\1\311\12\24\1\25\3\42"+
    "\1\312\1\313\2\30\1\314\1\24\1\151\2\24\1\25\2\24\1\315\1\24\1\76\1\24\1\76"+
    "\4\30\17\24\1\50\10\30\6\24\1\31\20\30\1\316\20\30\3\24\1\31\6\24\1\132\1"+
    "\30\1\253\3\30\4\24\1\30\1\260\3\24\1\50\4\24\1\66\1\317\3\24\1\76\4\24\1"+
    "\115\1\24\1\255\5\30\23\24\1\76\1\5\1\167\4\24\1\115\4\24\1\115\5\24\1\30"+
    "\6\24\1\115\23\30\46\24\1\25\1\30\2\24\1\76\1\30\1\24\23\30\1\76\1\107\4\24"+
    "\1\40\1\320\2\24\1\76\1\30\2\24\1\25\1\30\3\24\1\25\10\30\2\24\1\321\1\30"+
    "\2\24\1\76\1\30\3\24\1\27\10\30\7\24\1\311\10\30\1\322\1\77\1\151\1\7\2\24"+
    "\1\115\1\122\4\30\3\24\1\31\3\24\1\31\4\30\1\24\1\7\2\24\1\323\3\30\6\24\1"+
    "\76\1\30\2\24\1\76\1\30\2\24\1\50\1\30\2\24\1\27\15\30\11\24\1\132\6\30\6"+
    "\24\1\50\1\30\6\24\1\50\41\30\1\234\6\24\1\0\1\166\3\30\1\126\1\5\1\30\1\63"+
    "\1\234\5\24\1\0\1\324\2\30\3\24\1\132\1\5\1\167\1\234\3\24\1\165\1\0\1\325"+
    "\1\5\2\30\4\24\1\326\1\30\1\234\5\24\1\54\1\0\1\327\1\330\1\5\1\331\4\30\2"+
    "\24\1\37\2\24\1\224\1\0\1\205\10\30\1\25\1\256\1\24\1\40\1\24\1\132\5\24\1"+
    "\165\1\0\1\317\1\5\1\167\1\145\1\105\1\106\2\24\1\107\1\130\1\111\1\112\1"+
    "\123\1\144\1\260\1\332\2\204\21\30\6\24\1\203\1\0\1\206\1\50\1\5\1\167\4\30"+
    "\6\24\2\0\1\333\1\30\1\5\1\167\24\30\5\24\1\165\1\51\1\0\1\253\2\30\1\276"+
    "\4\30\6\24\2\0\1\334\1\30\1\5\1\167\4\30\5\24\1\54\1\0\1\30\1\5\1\167\6\30"+
    "\3\24\1\335\1\0\1\2\1\5\1\167\54\30\10\24\1\5\1\167\1\30\1\44\40\30\1\102"+
    "\1\234\4\24\1\54\1\336\1\63\1\30\1\102\1\100\4\24\1\244\1\213\1\0\1\200\4"+
    "\30\7\24\1\132\40\30\1\24\1\107\3\24\1\165\1\166\1\0\1\132\1\30\1\5\1\167"+
    "\2\30\1\42\3\24\1\337\2\0\1\45\1\166\11\30\1\25\1\37\4\24\1\340\1\341\1\214"+
    "\1\30\1\0\1\200\24\30\63\24\1\27\14\30\15\24\1\25\2\30\30\24\1\115\27\30\5"+
    "\24\1\25\72\30\10\24\1\25\67\30\7\24\1\132\3\24\1\25\1\5\1\167\14\30\3\24"+
    "\1\76\1\204\1\30\6\24\1\166\1\30\1\115\1\30\1\5\1\167\1\305\2\24\1\260\2\24"+
    "\56\30\10\24\1\31\1\30\1\102\4\0\1\166\1\30\1\63\1\234\1\24\10\30\1\27\3\30"+
    "\75\24\1\31\2\30\36\24\1\50\41\30\43\24\1\25\12\30\61\24\1\115\40\30\15\24"+
    "\1\50\1\24\1\31\1\24\1\132\1\24\1\342\1\2\127\30\1\343\1\344\2\0\1\345\1\2"+
    "\3\30\1\346\22\30\1\330\67\30\12\24\1\33\10\24\1\33\1\347\1\350\1\24\1\351"+
    "\1\151\7\24\1\40\1\352\2\33\3\24\1\353\1\176\1\42\1\107\51\24\1\76\3\24\1"+
    "\107\2\24\1\216\3\24\1\216\2\24\1\33\3\24\1\33\2\24\1\25\3\24\1\25\3\24\1"+
    "\107\3\24\1\107\2\24\1\216\1\354\6\5\6\0\1\166\1\233\5\0\1\204\1\316\1\30"+
    "\1\355\2\30\1\233\1\45\1\0\52\30\1\166\2\0\1\356\1\357\1\317\72\30\30\24\1"+
    "\31\1\30\1\166\5\30\10\24\1\224\1\317\1\5\1\167\24\30\1\151\3\24\1\170\1\7"+
    "\1\216\1\360\1\254\1\361\1\170\1\242\1\170\2\216\1\125\1\24\1\37\1\24\1\115"+
    "\1\362\1\37\1\24\1\115\50\30\32\24\1\25\5\30\106\24\1\31\1\30\33\24\1\76\120"+
    "\24\1\27\1\30\146\24\1\132\3\30\3\24\1\76\74\30\1\124\3\30\14\0\20\30\36\0"+
    "\2\30");

  /* The ZZ_CMAP_A table has 1944 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\4\5\1\6\4\4\0\1\1\2\0\1\6\1\10\7\0\1\13\1\0\1\12\1\0\12\2\3\0\1\14\3\0"+
    "\7\3\1\41\4\3\1\43\1\31\4\3\1\36\1\24\6\3\4\0\1\3\1\0\1\22\1\27\1\30\1\17"+
    "\1\20\3\3\1\35\1\21\1\3\1\37\1\15\1\32\1\16\1\26\1\3\1\34\1\42\1\40\1\33\1"+
    "\23\2\3\1\25\1\3\1\7\1\0\1\11\1\0\6\4\1\5\2\4\1\1\1\0\4\3\4\0\1\3\2\0\1\4"+
    "\7\0\1\3\4\0\1\3\5\0\17\3\1\0\2\3\4\0\4\3\16\0\5\3\7\0\1\3\1\0\1\3\1\0\5\3"+
    "\1\0\2\3\2\0\4\3\1\0\1\3\6\0\1\3\1\0\3\3\1\0\1\3\1\0\4\3\1\0\13\3\1\0\3\3"+
    "\1\0\5\4\2\0\6\3\1\0\1\3\15\0\1\3\1\0\15\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0\1\4"+
    "\3\3\5\0\6\4\5\0\1\3\4\0\3\4\1\0\1\4\3\0\3\3\5\4\2\2\4\0\2\3\1\4\13\3\1\0"+
    "\1\3\7\4\2\3\2\4\1\0\4\4\2\3\2\2\3\3\2\0\1\3\7\0\1\4\1\3\1\4\6\3\3\4\2\0\11"+
    "\3\3\4\1\3\6\0\2\2\6\3\4\4\2\3\2\0\2\4\1\3\11\4\1\3\3\4\1\3\5\4\2\0\1\3\3"+
    "\4\4\0\6\3\6\0\10\4\6\3\3\4\1\3\2\4\1\3\7\4\2\3\2\4\2\0\2\2\1\3\3\4\1\0\10"+
    "\3\2\0\2\3\2\0\6\3\1\0\7\3\1\0\1\3\3\0\4\3\2\0\1\4\1\3\7\4\2\0\2\4\2\0\3\4"+
    "\1\3\5\0\2\3\1\0\5\3\7\0\2\3\4\0\3\4\1\0\4\3\1\0\2\3\1\0\2\3\1\0\2\3\2\0\1"+
    "\4\1\0\5\4\4\0\2\4\2\0\3\4\3\0\1\4\7\0\4\3\1\0\1\3\7\0\2\2\2\4\3\3\1\4\2\0"+
    "\1\3\1\0\2\3\1\0\3\3\2\4\1\0\3\4\2\0\1\3\10\0\1\3\6\4\6\0\2\4\2\0\1\4\1\3"+
    "\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3\1\0\4\3\4\0\5\4\3\0\3\4\1\0\4\4\2"+
    "\0\1\3\6\0\5\4\1\0\5\3\3\0\1\3\7\4\1\0\2\4\5\0\2\4\1\0\4\3\1\0\3\3\1\0\2\3"+
    "\5\0\3\3\2\4\1\3\3\4\1\0\4\4\1\3\5\0\3\3\1\4\2\0\2\4\1\0\7\3\1\0\1\3\4\0\1"+
    "\4\4\0\6\4\1\0\1\4\3\0\2\4\4\0\1\3\1\4\2\3\7\4\4\0\10\3\10\4\1\0\2\2\7\0\2"+
    "\3\1\0\1\3\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3"+
    "\1\0\3\3\2\4\1\0\2\4\1\3\2\0\5\3\1\0\1\3\1\0\2\2\2\0\4\3\2\4\13\0\1\4\1\0"+
    "\1\4\1\0\1\4\4\0\2\4\5\3\10\4\11\0\1\4\1\0\7\4\1\3\2\4\4\3\3\4\1\3\3\4\2\3"+
    "\7\4\3\3\4\4\5\3\14\4\1\3\1\4\2\2\4\4\2\0\3\3\1\0\7\3\2\0\3\4\1\1\11\3\3\4"+
    "\3\0\2\3\2\4\4\0\1\3\1\0\2\4\4\0\4\3\10\4\3\0\1\3\3\0\2\3\1\4\5\0\4\4\1\0"+
    "\5\3\2\4\2\3\1\4\1\3\5\0\5\4\3\3\3\0\10\4\5\3\2\2\3\0\3\3\3\4\1\0\5\4\4\3"+
    "\1\4\4\3\3\4\2\3\3\4\1\0\5\4\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\2\0\3\3\1\0\6"+
    "\3\2\0\2\3\13\1\5\4\2\1\5\4\1\1\4\0\1\3\12\0\1\1\1\0\1\4\3\0\4\4\11\0\1\3"+
    "\4\0\1\3\1\0\5\3\2\0\1\3\1\0\4\3\1\0\3\3\2\0\4\3\5\0\5\3\4\0\1\3\4\0\4\3\3"+
    "\4\2\3\4\0\1\1\4\0\3\3\1\0\2\4\2\0\3\3\2\2\2\3\4\0\6\4\1\0\3\3\1\4\3\3\1\4"+
    "\4\3\1\4\4\3\2\4\6\3\3\0\1\3\1\0\1\3\2\0\5\3\1\4\2\3\2\2\5\3\1\0\4\3\2\4\4"+
    "\0\1\3\3\4\2\3\1\4\5\3\2\4\3\0\3\3\4\0\3\3\2\4\2\0\6\3\1\0\3\4\1\0\2\4\5\0"+
    "\5\3\5\0\1\3\1\4\3\3\1\0\2\3\1\0\7\3\2\0\1\4\6\0\2\3\2\0\3\3\3\0\2\3\3\0\2"+
    "\3\2\0\3\4\4\0\3\3\1\0\2\3\1\0\1\3\5\0\1\4\2\0\3\4\5\0\1\3\3\0\1\3\2\0\4\3"+
    "\1\0\2\3\2\0\1\3\3\4\1\0\2\4\1\0\5\3\2\4\1\0\3\4\2\0\1\4\2\0\5\4\1\0\2\2\3"+
    "\3\1\4\2\0\1\3\1\0\1\4\4\3\5\0\3\4\3\0\2\2\1\3\1\0\1\3\3\0\2\3\2\4\2\0\6\4"+
    "\2\3\1\0\1\3\1\4\3\0\1\3\3\0\2\3\3\0\5\4\1\3\4\4\3\0\6\4\1\3\6\4\3\0\1\4\1"+
    "\0\2\4\1\0\1\4\2\3\3\0\2\4\6\0\5\4\3\0\6\4\2\0\3\4\2\0\4\4\4\0\1\3\2\0\2\3"+
    "\2\0\4\3\1\0\4\3\1\0\1\3\1\0\6\3\2\0\5\3\1\0\4\3\1\0\4\3\2\0\2\2\4\0\1\4\3"+
    "\0\1\4\2\0\7\4\1\0\2\4\1\0\2\4\1\0\1\3\1\0\1\3\5\0\1\3\1\0\1\3\1\0\3\3\1\0"+
    "\3\3\1\0\3\3");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\5\4\1\14\14\4\1\15"+
    "\24\4\1\16\1\17\5\4\1\20\6\4\1\21\1\22"+
    "\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[68];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\44\0\220"+
    "\0\44\0\44\0\44\0\44\0\330\0\374\0\u0120\0\u0144"+
    "\0\u0168\0\44\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c\0\u0240"+
    "\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4\0\u0318\0\220\0\u033c"+
    "\0\u0360\0\u0384\0\u03a8\0\u03cc\0\u03f0\0\u0414\0\u0438\0\u045c"+
    "\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510\0\u0534\0\u0558\0\u057c"+
    "\0\u05a0\0\u05c4\0\u05e8\0\u060c\0\220\0\u0630\0\u0654\0\u0678"+
    "\0\u069c\0\u06c0\0\220\0\u06e4\0\u0708\0\u072c\0\u0750\0\u0774"+
    "\0\u0798\0\220\0\220\0\220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[68];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\3\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\3\5\1\16"+
    "\10\5\1\17\1\5\1\20\3\5\1\21\3\5\45\0"+
    "\1\3\3\0\1\3\40\0\1\4\43\0\4\5\2\0"+
    "\1\5\4\0\27\5\7\0\1\22\36\0\4\5\2\0"+
    "\1\5\4\0\1\5\1\23\25\5\2\0\4\5\2\0"+
    "\1\5\4\0\2\5\1\24\2\5\1\25\21\5\2\0"+
    "\4\5\2\0\1\5\4\0\16\5\1\26\10\5\2\0"+
    "\4\5\2\0\1\5\4\0\3\5\1\27\23\5\2\0"+
    "\4\5\2\0\1\5\4\0\10\5\1\30\16\5\2\0"+
    "\4\5\2\0\1\5\4\0\2\5\1\31\24\5\2\0"+
    "\4\5\2\0\1\5\4\0\12\5\1\32\14\5\2\0"+
    "\4\5\2\0\1\5\4\0\6\5\1\33\20\5\2\0"+
    "\4\5\2\0\1\5\4\0\1\34\26\5\2\0\4\5"+
    "\2\0\1\5\4\0\25\5\1\35\1\5\2\0\4\5"+
    "\2\0\1\5\4\0\11\5\1\36\15\5\2\0\4\5"+
    "\2\0\1\5\4\0\3\5\1\37\23\5\2\0\4\5"+
    "\2\0\1\5\4\0\13\5\1\40\13\5\2\0\4\5"+
    "\2\0\1\5\4\0\5\5\1\41\21\5\2\0\4\5"+
    "\2\0\1\5\4\0\3\5\1\42\23\5\2\0\4\5"+
    "\2\0\1\5\4\0\16\5\1\43\10\5\2\0\4\5"+
    "\2\0\1\5\4\0\3\5\1\44\23\5\2\0\4\5"+
    "\2\0\1\5\4\0\7\5\1\45\17\5\2\0\4\5"+
    "\2\0\1\5\4\0\7\5\1\46\17\5\2\0\4\5"+
    "\2\0\1\5\4\0\17\5\1\47\7\5\2\0\4\5"+
    "\2\0\1\5\4\0\22\5\1\50\4\5\2\0\4\5"+
    "\2\0\1\5\4\0\24\5\1\51\2\5\2\0\4\5"+
    "\2\0\1\5\4\0\10\5\1\52\16\5\2\0\4\5"+
    "\2\0\1\5\4\0\10\5\1\53\16\5\2\0\4\5"+
    "\2\0\1\5\4\0\20\5\1\54\6\5\2\0\4\5"+
    "\2\0\1\5\4\0\23\5\1\55\3\5\2\0\4\5"+
    "\2\0\1\5\4\0\5\5\1\56\21\5\2\0\4\5"+
    "\2\0\1\5\4\0\11\5\1\57\15\5\2\0\4\5"+
    "\2\0\1\5\4\0\11\5\1\60\15\5\2\0\4\5"+
    "\2\0\1\5\4\0\13\5\1\61\13\5\2\0\4\5"+
    "\2\0\1\5\4\0\26\5\1\62\2\0\4\5\2\0"+
    "\1\5\4\0\15\5\1\63\11\5\2\0\4\5\2\0"+
    "\1\5\4\0\3\5\1\64\23\5\2\0\4\5\2\0"+
    "\1\5\4\0\3\5\1\65\23\5\2\0\4\5\2\0"+
    "\1\5\4\0\21\5\1\66\5\5\2\0\4\5\2\0"+
    "\1\5\4\0\5\5\1\67\21\5\2\0\4\5\2\0"+
    "\1\5\4\0\2\5\1\70\24\5\2\0\4\5\2\0"+
    "\1\5\4\0\14\5\1\71\12\5\2\0\4\5\2\0"+
    "\1\5\4\0\13\5\1\72\13\5\2\0\4\5\2\0"+
    "\1\5\4\0\11\5\1\73\15\5\2\0\4\5\2\0"+
    "\1\5\4\0\22\5\1\74\4\5\2\0\4\5\2\0"+
    "\1\5\4\0\5\5\1\75\21\5\2\0\4\5\2\0"+
    "\1\5\4\0\5\5\1\76\21\5\2\0\4\5\2\0"+
    "\1\5\4\0\3\5\1\77\23\5\2\0\4\5\2\0"+
    "\1\5\4\0\1\100\26\5\2\0\4\5\2\0\1\5"+
    "\4\0\22\5\1\101\4\5\2\0\4\5\2\0\1\5"+
    "\4\0\17\5\1\102\7\5\2\0\4\5\2\0\1\5"+
    "\4\0\3\5\1\103\23\5\2\0\4\5\2\0\1\5"+
    "\4\0\3\5\1\104\23\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1980];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\4\1\1\11\1\1\4\11\5\1\1\11"+
    "\62\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[68];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MbELLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MbELLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return INTEGER_LITERAL;
            } 
            // fall through
          case 20: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 21: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 22: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 23: break;
          case 5: 
            { return HASH;
            } 
            // fall through
          case 24: break;
          case 6: 
            { return LBRACE;
            } 
            // fall through
          case 25: break;
          case 7: 
            { return DOLLAR_KEYWORD;
            } 
            // fall through
          case 26: break;
          case 8: 
            { return RBRACE;
            } 
            // fall through
          case 27: break;
          case 9: 
            { return DOT;
            } 
            // fall through
          case 28: break;
          case 10: 
            { return COMMA;
            } 
            // fall through
          case 29: break;
          case 11: 
            { return EQ;
            } 
            // fall through
          case 30: break;
          case 12: 
            { return HASH_START;
            } 
            // fall through
          case 31: break;
          case 13: 
            { return MODE_KEYWORD;
            } 
            // fall through
          case 32: break;
          case 14: 
            { return JDBC_TYPE_KEYWORD;
            } 
            // fall through
          case 33: break;
          case 15: 
            { return JAVA_TYPE_KEYWORD;
            } 
            // fall through
          case 34: break;
          case 16: 
            { return RESULT_MAP_KEYWORD;
            } 
            // fall through
          case 35: break;
          case 17: 
            { return TYPE_HANDLER_KEYWORD;
            } 
            // fall through
          case 36: break;
          case 18: 
            { return JDBC_TYPE_KEYWORD_NAME;
            } 
            // fall through
          case 37: break;
          case 19: 
            { return NUMERIC_SCALE_KEYWORD;
            } 
            // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
