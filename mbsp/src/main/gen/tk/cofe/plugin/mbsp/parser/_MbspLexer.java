/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package tk.cofe.plugin.mbsp.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static tk.cofe.plugin.mbsp.MbspTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_MbspLexer.flex</tt>
 */
public class _MbspLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17584 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\16\3"+
    "\0\1\17\1\20\1\21\1\22\2\10\1\23\3\10\1\23\71\10\1\24\1\10\1\25\1\26\1\27"+
    "\1\30\2\26\16\0\1\31\1\32\1\33\1\34\2\10\1\35\11\10\1\36\21\10\1\37\1\40\24"+
    "\10\1\41\3\10\1\23\1\42\1\41\4\10\1\43\1\44\4\0\1\45\1\46\1\26\3\10\2\47\1"+
    "\26\1\50\1\51\1\0\1\52\5\10\1\53\2\0\1\5\1\54\1\55\13\10\1\56\1\45\1\57\1"+
    "\60\1\5\1\61\1\26\1\62\1\63\3\10\3\0\1\64\12\10\1\65\1\0\1\66\1\26\1\5\1\67"+
    "\3\10\1\53\1\70\1\22\2\10\1\65\1\71\1\72\1\73\2\26\3\10\1\74\1\10\1\47\6\26"+
    "\2\10\1\31\1\75\2\26\1\76\5\0\1\77\6\10\1\100\2\0\1\101\1\10\1\102\1\5\1\41"+
    "\1\10\1\103\1\104\1\105\2\10\1\106\1\107\1\110\1\111\1\112\1\62\1\113\1\102"+
    "\1\5\1\114\1\115\1\116\1\117\1\105\2\10\1\106\1\120\1\121\1\122\1\123\1\124"+
    "\1\125\1\126\1\5\1\127\1\26\1\116\1\36\1\35\2\10\1\106\1\130\1\110\1\45\1"+
    "\131\1\132\1\26\1\102\1\5\1\42\1\133\1\116\1\104\1\105\2\10\1\106\1\130\1"+
    "\110\1\111\1\123\1\134\1\113\1\102\1\5\1\42\1\26\1\135\1\136\1\137\1\140\1"+
    "\115\1\136\1\10\1\141\1\142\1\143\1\144\1\26\1\126\1\5\1\26\1\42\1\145\1\31"+
    "\1\106\2\10\1\106\1\10\1\146\1\147\1\143\1\150\1\47\1\102\1\5\2\26\1\103\1"+
    "\31\1\106\2\10\1\106\1\151\1\110\1\147\1\143\1\150\1\33\1\102\1\5\1\152\1"+
    "\26\1\145\1\31\1\106\4\10\1\153\1\147\1\154\1\155\1\43\1\102\1\5\1\26\1\40"+
    "\1\156\1\10\1\23\1\40\2\10\1\35\1\157\1\23\1\160\1\161\1\0\1\126\1\5\1\162"+
    "\1\26\1\41\5\10\1\163\1\164\1\165\1\166\1\5\1\167\4\26\1\170\1\171\1\172\1"+
    "\41\1\173\1\174\1\163\1\175\1\176\1\50\1\5\1\177\4\26\1\132\2\26\1\200\1\5"+
    "\1\167\1\201\1\202\1\10\1\41\3\10\1\27\1\44\1\0\1\147\1\203\1\0\1\44\3\0\1"+
    "\204\1\205\7\26\5\10\1\53\1\0\1\206\1\5\1\167\1\65\1\207\1\210\1\211\1\212"+
    "\1\10\1\213\1\214\1\5\1\215\4\10\1\36\1\21\5\10\1\216\51\10\1\137\1\23\1\137"+
    "\5\10\1\137\4\10\1\137\1\23\1\137\1\10\1\23\7\10\1\137\10\10\1\217\4\26\2"+
    "\10\2\26\12\10\2\75\1\41\114\10\1\104\2\10\1\220\2\10\1\47\11\10\1\136\1\10"+
    "\1\132\1\10\1\31\1\221\1\26\2\10\1\221\1\26\2\10\1\222\1\26\1\10\1\31\1\223"+
    "\1\26\6\10\1\224\3\0\1\225\1\226\1\5\1\167\3\26\1\227\1\5\1\167\13\10\1\26"+
    "\1\230\4\10\1\231\10\10\1\75\1\26\3\10\1\23\1\0\1\2\1\0\1\2\1\126\1\5\3\10"+
    "\1\75\1\27\1\26\5\10\1\114\3\10\1\25\1\5\1\167\4\26\2\10\1\165\1\2\6\10\1"+
    "\203\1\166\3\0\1\111\1\5\1\167\1\5\1\167\1\43\1\26\1\0\1\50\10\26\1\232\5"+
    "\10\1\224\1\0\1\232\1\114\1\5\1\167\1\26\1\233\1\2\1\26\1\234\3\10\1\101\1"+
    "\211\1\5\1\67\4\10\1\65\1\0\1\2\1\26\4\10\1\224\2\0\1\26\1\5\1\235\1\5\1\67"+
    "\3\10\1\75\1\10\1\132\10\26\1\236\2\0\1\237\1\240\1\200\30\10\7\0\1\241\42"+
    "\10\2\75\4\10\2\75\1\10\1\242\3\10\1\75\6\10\1\31\1\176\1\243\1\27\1\244\1"+
    "\114\1\10\1\27\1\243\1\27\1\245\1\246\3\26\1\247\1\26\1\43\1\132\1\26\1\250"+
    "\1\251\1\147\1\0\1\42\1\43\2\26\1\10\1\27\4\10\2\26\1\0\1\204\1\252\1\0\1"+
    "\253\1\26\1\254\1\40\1\157\1\255\1\30\1\256\1\10\1\257\1\260\1\261\2\26\5"+
    "\10\1\132\116\26\5\10\1\23\5\10\1\23\20\10\1\27\1\262\1\263\1\26\4\10\1\36"+
    "\1\21\7\10\1\43\1\26\1\62\2\10\1\23\1\26\10\23\4\0\5\26\1\43\72\26\1\264\3"+
    "\26\1\41\1\213\1\255\1\27\1\41\11\10\1\23\1\265\1\41\12\10\1\216\1\260\4\10"+
    "\1\23\1\41\12\10\1\23\2\26\3\10\1\47\6\26\170\10\1\75\11\26\75\10\1\47\2\26"+
    "\21\10\1\27\10\26\5\10\1\75\41\10\1\27\2\10\1\5\1\266\2\26\5\10\1\165\1\76"+
    "\1\267\3\10\1\65\12\10\1\200\3\26\1\43\1\10\1\40\14\10\1\105\3\10\1\23\1\10"+
    "\7\26\1\43\1\10\1\270\1\271\2\10\1\53\2\26\1\132\6\10\1\114\1\26\1\272\5\10"+
    "\1\224\1\0\1\50\1\26\1\5\1\167\2\0\1\272\1\273\1\5\1\67\2\10\1\65\1\50\2\10"+
    "\1\165\1\0\1\2\1\26\3\10\1\27\1\77\5\10\1\53\1\0\1\253\1\43\1\5\1\167\1\274"+
    "\1\10\1\5\1\275\5\10\1\101\1\166\1\26\1\271\1\276\1\5\1\167\2\10\1\23\1\277"+
    "\6\10\1\210\1\300\1\231\2\26\1\301\1\10\1\53\1\302\1\26\3\303\1\26\2\23\5"+
    "\10\1\216\1\75\1\26\16\10\1\53\1\304\1\5\1\167\64\10\1\114\1\26\2\10\1\23"+
    "\1\305\5\10\1\114\40\26\55\10\1\75\15\10\1\25\4\26\1\23\1\26\1\305\1\306\1"+
    "\10\1\106\1\23\1\176\1\307\15\10\1\25\3\26\1\305\54\10\1\75\2\26\10\10\1\40"+
    "\6\10\5\26\1\10\1\27\2\0\2\26\2\0\1\115\2\26\1\260\3\26\1\42\1\31\20\10\1"+
    "\310\1\250\1\26\1\5\1\167\1\41\2\10\1\117\1\41\2\10\1\47\1\311\12\10\1\23"+
    "\3\40\1\312\1\313\2\26\1\314\1\10\1\151\2\10\1\23\2\10\1\315\1\10\1\75\1\10"+
    "\1\75\4\26\17\10\1\47\10\26\6\10\1\27\20\26\1\316\20\26\3\10\1\27\6\10\1\132"+
    "\1\26\1\253\3\26\4\10\1\26\1\260\3\10\1\47\4\10\1\65\1\317\3\10\1\75\4\10"+
    "\1\114\1\10\1\255\5\26\23\10\1\75\1\5\1\167\4\10\1\114\4\10\1\114\5\10\1\26"+
    "\6\10\1\114\23\26\46\10\1\23\1\26\2\10\1\75\1\26\1\10\23\26\1\75\1\106\4\10"+
    "\1\36\1\320\2\10\1\75\1\26\2\10\1\23\1\26\3\10\1\23\10\26\2\10\1\321\1\26"+
    "\2\10\1\75\1\26\3\10\1\25\10\26\7\10\1\311\10\26\1\322\1\76\1\151\1\41\2\10"+
    "\1\114\1\122\4\26\3\10\1\27\3\10\1\27\4\26\1\10\1\41\2\10\1\323\3\26\6\10"+
    "\1\75\1\26\2\10\1\75\1\26\2\10\1\47\1\26\2\10\1\25\15\26\11\10\1\132\6\26"+
    "\6\10\1\47\1\26\6\10\1\47\41\26\1\234\6\10\1\0\1\166\3\26\1\126\1\5\1\26\1"+
    "\62\1\234\5\10\1\0\1\324\2\26\3\10\1\132\1\5\1\167\1\234\3\10\1\165\1\0\1"+
    "\325\1\5\2\26\4\10\1\326\1\26\1\234\5\10\1\53\1\0\1\327\1\330\1\5\1\331\4"+
    "\26\2\10\1\35\2\10\1\224\1\0\1\205\10\26\1\23\1\256\1\10\1\36\1\10\1\132\5"+
    "\10\1\165\1\0\1\317\1\5\1\167\1\145\1\104\1\105\2\10\1\106\1\130\1\110\1\111"+
    "\1\123\1\144\1\260\1\332\2\204\21\26\6\10\1\203\1\0\1\206\1\47\1\5\1\167\4"+
    "\26\6\10\2\0\1\333\1\26\1\5\1\167\24\26\5\10\1\165\1\50\1\0\1\253\2\26\1\276"+
    "\4\26\6\10\2\0\1\334\1\26\1\5\1\167\4\26\5\10\1\53\1\0\1\26\1\5\1\167\6\26"+
    "\3\10\1\335\1\0\1\2\1\5\1\167\54\26\10\10\1\5\1\167\1\26\1\43\40\26\1\101"+
    "\1\234\4\10\1\53\1\336\1\62\1\26\1\101\1\77\4\10\1\244\1\213\1\0\1\200\4\26"+
    "\7\10\1\132\40\26\1\10\1\106\3\10\1\165\1\166\1\0\1\132\1\26\1\5\1\167\2\26"+
    "\1\40\3\10\1\337\2\0\1\44\1\166\11\26\1\23\1\35\4\10\1\340\1\341\1\214\1\26"+
    "\1\0\1\200\24\26\63\10\1\25\14\26\15\10\1\23\2\26\30\10\1\114\27\26\5\10\1"+
    "\23\72\26\10\10\1\23\67\26\7\10\1\132\3\10\1\23\1\5\1\167\14\26\3\10\1\75"+
    "\1\204\1\26\6\10\1\166\1\26\1\114\1\26\1\5\1\167\1\305\2\10\1\260\2\10\56"+
    "\26\10\10\1\27\1\26\1\101\4\0\1\166\1\26\1\62\1\234\1\10\10\26\1\25\3\26\75"+
    "\10\1\27\2\26\36\10\1\47\41\26\43\10\1\23\12\26\61\10\1\114\40\26\15\10\1"+
    "\47\1\10\1\27\1\10\1\132\1\10\1\342\1\2\127\26\1\343\1\344\2\0\1\345\1\2\3"+
    "\26\1\346\22\26\1\330\67\26\12\10\1\31\10\10\1\31\1\347\1\350\1\10\1\351\1"+
    "\151\7\10\1\36\1\352\2\31\3\10\1\353\1\176\1\40\1\106\51\10\1\75\3\10\1\106"+
    "\2\10\1\216\3\10\1\216\2\10\1\31\3\10\1\31\2\10\1\23\3\10\1\23\3\10\1\106"+
    "\3\10\1\106\2\10\1\216\1\354\6\5\6\0\1\166\1\233\5\0\1\204\1\316\1\26\1\355"+
    "\2\26\1\233\1\44\1\0\52\26\1\166\2\0\1\356\1\357\1\317\72\26\30\10\1\27\1"+
    "\26\1\166\5\26\10\10\1\224\1\317\1\5\1\167\24\26\1\151\3\10\1\170\1\41\1\216"+
    "\1\360\1\254\1\361\1\170\1\242\1\170\2\216\1\125\1\10\1\35\1\10\1\114\1\362"+
    "\1\35\1\10\1\114\50\26\32\10\1\23\5\26\106\10\1\27\1\26\33\10\1\75\120\10"+
    "\1\25\1\26\146\10\1\132\3\26\3\10\1\75\74\26\1\124\3\26\14\0\20\26\36\0\2"+
    "\26");

  /* The ZZ_CMAP_A table has 1944 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\1\1\2\2\1\1\2\6\7\4\0\1\62\1\30\1\14\1\3\1\6\1\27\1\42\1\13\1\16\1"+
    "\17\1\25\1\23\1\15\1\24\1\12\1\26\12\11\1\66\1\0\1\32\1\31\1\33\1\65\1\64"+
    "\22\5\1\20\1\0\1\21\1\50\1\5\1\0\1\44\1\52\1\61\1\45\1\34\1\56\1\41\1\63\1"+
    "\60\2\5\1\37\1\5\1\36\1\46\1\5\1\35\1\47\1\57\1\40\1\55\1\5\1\54\1\53\2\5"+
    "\1\4\1\43\1\22\1\51\6\7\1\10\2\7\1\1\1\0\4\5\4\0\1\5\2\0\1\7\7\0\1\5\4\0\1"+
    "\5\5\0\7\5\1\0\2\5\4\0\4\5\16\0\5\5\7\0\1\5\1\0\1\5\1\0\5\5\1\0\2\5\2\0\4"+
    "\5\1\0\1\5\6\0\1\5\1\0\3\5\1\0\1\5\1\0\4\5\1\0\13\5\1\0\3\5\1\0\5\7\2\0\6"+
    "\5\1\0\7\5\1\0\1\5\15\0\1\5\1\0\15\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\3\5\5"+
    "\0\6\7\5\0\1\5\4\0\3\7\1\0\1\7\3\0\3\5\5\7\2\11\4\0\2\5\1\7\13\5\1\0\1\5\7"+
    "\7\2\5\2\7\1\0\4\7\2\5\2\11\3\5\2\0\1\5\7\0\1\7\1\5\1\7\6\5\3\7\2\0\11\5\3"+
    "\7\1\5\6\0\2\11\6\5\4\7\2\5\2\0\2\7\1\5\11\7\1\5\3\7\1\5\5\7\2\0\1\5\3\7\4"+
    "\0\6\5\6\0\10\7\6\5\3\7\1\5\2\7\1\5\7\7\2\5\2\7\2\0\2\11\1\5\3\7\1\0\10\5"+
    "\2\0\2\5\2\0\6\5\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\7\1\5\7\7\2\0\2\7\2\0\3\7\1"+
    "\5\5\0\2\5\1\0\5\5\7\0\2\5\4\0\3\7\1\0\6\5\4\0\2\5\1\0\2\5\1\0\2\5\1\0\2\5"+
    "\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\5\1\0\1\5\7\0\2\11\2\7\3\5"+
    "\1\7\2\0\1\5\1\0\2\5\1\0\3\5\2\7\1\0\3\7\2\0\1\5\10\0\1\5\6\7\6\0\2\7\2\0"+
    "\1\7\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\4\5\4\0\5\7\3\0\3\7\1"+
    "\0\4\7\2\0\1\5\6\0\5\7\1\0\5\5\3\0\1\5\7\7\1\0\2\7\5\0\2\7\1\0\4\5\1\0\3\5"+
    "\1\0\2\5\5\0\3\5\2\7\1\5\3\7\1\0\4\7\1\5\5\0\3\5\1\7\2\0\2\7\1\0\7\5\1\0\1"+
    "\5\4\0\1\7\4\0\6\7\1\0\1\7\3\0\2\7\4\0\1\5\1\7\2\5\7\7\4\0\10\5\10\7\1\0\2"+
    "\11\7\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\3\5\1\0\1\5\1\0\1"+
    "\5\2\0\2\5\1\0\3\5\2\7\1\0\2\7\1\5\2\0\5\5\1\0\1\5\1\0\2\11\2\0\4\5\2\7\13"+
    "\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\5\5\10\7\11\0\1\7\1\0\7\7\1\5\2\7\4\5\3\7\1"+
    "\5\3\7\2\5\7\7\3\5\4\7\5\5\14\7\1\5\1\7\2\11\4\7\2\0\3\5\1\0\7\5\2\0\3\7\1"+
    "\1\11\5\3\7\3\0\2\5\2\7\4\0\1\5\1\0\2\7\4\0\4\5\10\7\3\0\1\5\3\0\2\5\1\7\5"+
    "\0\4\7\1\0\5\5\2\7\2\5\1\7\1\5\5\0\5\7\3\5\3\0\10\7\5\5\2\11\3\0\3\5\3\7\1"+
    "\0\5\7\4\5\1\7\4\5\3\7\2\5\3\7\1\0\5\7\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\2\0"+
    "\3\5\1\0\6\5\2\0\2\5\13\1\5\7\2\1\5\7\1\1\4\0\1\5\12\0\1\1\1\0\1\7\3\0\4\7"+
    "\11\0\1\5\4\0\1\5\1\0\5\5\2\0\1\5\1\0\4\5\1\0\3\5\2\0\4\5\5\0\5\5\4\0\1\5"+
    "\4\0\4\5\3\7\2\5\4\0\1\1\4\0\3\5\1\0\2\7\2\0\3\5\2\11\2\5\4\0\6\7\1\0\3\5"+
    "\1\7\3\5\1\7\4\5\1\7\4\5\2\7\6\5\3\0\1\5\1\0\1\5\2\0\5\5\1\7\2\5\2\11\5\5"+
    "\1\0\4\5\2\7\4\0\1\5\3\7\2\5\1\7\5\5\2\7\3\0\3\5\4\0\3\5\2\7\2\0\6\5\1\0\3"+
    "\7\1\0\2\7\5\0\5\5\5\0\1\5\1\7\3\5\1\0\2\5\1\0\7\5\2\0\1\7\6\0\2\5\2\0\3\5"+
    "\3\0\2\5\3\0\2\5\2\0\3\7\4\0\3\5\1\0\2\5\1\0\1\5\5\0\1\7\2\0\3\7\5\0\1\5\3"+
    "\0\1\5\2\0\4\5\1\0\2\5\2\0\1\5\3\7\1\0\2\7\1\0\5\5\2\7\1\0\3\7\2\0\1\7\2\0"+
    "\5\7\1\0\2\11\3\5\1\7\2\0\1\5\1\0\1\7\4\5\5\0\3\7\3\0\2\11\1\5\1\0\1\5\3\0"+
    "\2\5\2\7\2\0\6\7\2\5\1\0\1\5\1\7\3\0\1\5\3\0\2\5\3\0\5\7\1\5\4\7\3\0\6\7\1"+
    "\5\6\7\3\0\1\7\1\0\2\7\1\0\1\7\2\5\3\0\2\7\6\0\5\7\3\0\6\7\2\0\3\7\2\0\4\7"+
    "\4\0\1\5\2\0\2\5\2\0\4\5\1\0\4\5\1\0\1\5\1\0\6\5\2\0\5\5\1\0\4\5\1\0\4\5\2"+
    "\0\2\11\4\0\1\7\3\0\1\7\2\0\7\7\1\0\2\7\1\0\2\7\1\0\1\5\1\0\1\5\5\0\1\5\1"+
    "\0\1\5\1\0\3\5\1\0\3\5\1\0\3\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\2\1\4\1\5\1\6\1\1"+
    "\1\7\2\2\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\5\5\1\27\1\30\2\5\1\31\1\32\6\5"+
    "\1\33\1\34\1\35\1\36\2\0\1\37\1\0\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\3\5"+
    "\1\50\1\5\1\51\1\52\1\53\1\5\1\54\6\5"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\5\1\63"+
    "\1\5\1\64\1\65\1\5\1\66\1\67\2\5\1\70"+
    "\1\71\1\5\1\0\1\72\1\73\1\74\1\75\2\5"+
    "\1\0\1\76\1\5\1\77\4\5\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\67\0\334\0\u0113\0\u014a"+
    "\0\67\0\u0181\0\u01b8\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\u01ef\0\u0226"+
    "\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de"+
    "\0\u0415\0\u044c\0\u0483\0\67\0\67\0\u04ba\0\u04f1\0\u0528"+
    "\0\u055f\0\u0596\0\u05cd\0\67\0\67\0\67\0\67\0\u0604"+
    "\0\u0181\0\u0181\0\u01b8\0\u01b8\0\67\0\67\0\67\0\67"+
    "\0\67\0\u063b\0\334\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e"+
    "\0\u0785\0\67\0\67\0\u07bc\0\334\0\u07f3\0\u082a\0\u0861"+
    "\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0604\0\67\0\334\0\334"+
    "\0\u0974\0\u09ab\0\334\0\u09e2\0\334\0\334\0\u0a19\0\334"+
    "\0\334\0\u0a50\0\u0a87\0\334\0\334\0\u0abe\0\u0af5\0\334"+
    "\0\334\0\334\0\334\0\u0b2c\0\u0b63\0\u0b9a\0\334\0\u0bd1"+
    "\0\67\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\334";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\2\1\3"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\6\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\6\1\43\1\6\1\44"+
    "\1\45\1\46\1\47\1\6\1\50\1\51\1\52\1\53"+
    "\1\6\1\3\1\6\1\54\1\55\1\56\70\0\2\3"+
    "\5\0\1\3\51\0\1\3\10\0\1\57\67\0\5\6"+
    "\22\0\6\6\2\0\4\6\2\0\10\6\1\0\1\6"+
    "\7\0\1\57\5\6\22\0\6\6\2\0\4\6\2\0"+
    "\10\6\1\0\1\6\14\0\1\10\1\60\54\0\2\61"+
    "\1\0\10\61\1\62\53\61\2\63\1\0\11\63\1\64"+
    "\52\63\31\0\1\65\66\0\1\66\66\0\1\67\1\70"+
    "\65\0\1\71\1\0\1\72\40\0\5\6\22\0\1\6"+
    "\1\73\4\6\2\0\4\6\2\0\10\6\1\0\1\6"+
    "\10\0\5\6\22\0\1\74\5\6\2\0\2\6\1\75"+
    "\1\6\2\0\3\6\1\76\4\6\1\0\1\6\10\0"+
    "\5\6\22\0\4\6\1\77\1\6\2\0\4\6\2\0"+
    "\10\6\1\0\1\6\10\0\5\6\22\0\6\6\2\0"+
    "\3\6\1\100\2\0\10\6\1\0\1\6\10\0\5\6"+
    "\22\0\4\6\1\101\1\6\2\0\4\6\2\0\10\6"+
    "\1\0\1\6\45\0\1\102\67\0\1\103\30\0\5\6"+
    "\22\0\2\6\1\104\3\6\2\0\4\6\2\0\10\6"+
    "\1\0\1\6\10\0\5\6\22\0\6\6\2\0\3\6"+
    "\1\105\2\0\10\6\1\0\1\6\10\0\5\6\22\0"+
    "\6\6\2\0\1\106\1\6\1\107\1\6\2\0\10\6"+
    "\1\0\1\6\10\0\5\6\22\0\6\6\2\0\2\6"+
    "\1\110\1\6\2\0\10\6\1\0\1\6\10\0\5\6"+
    "\22\0\6\6\2\0\4\6\2\0\5\6\1\111\2\6"+
    "\1\0\1\6\10\0\5\6\22\0\6\6\2\0\1\112"+
    "\3\6\2\0\10\6\1\0\1\6\10\0\5\6\22\0"+
    "\6\6\2\0\4\6\2\0\10\6\1\0\1\113\10\0"+
    "\5\6\22\0\2\6\1\114\3\6\2\0\4\6\2\0"+
    "\10\6\1\0\1\6\14\0\1\115\110\0\1\116\40\0"+
    "\5\6\22\0\1\6\1\117\4\6\2\0\4\6\2\0"+
    "\2\6\1\120\5\6\1\0\1\6\10\0\5\6\22\0"+
    "\4\6\1\121\1\6\2\0\4\6\2\0\10\6\1\0"+
    "\1\6\10\0\5\6\22\0\3\6\1\122\2\6\2\0"+
    "\4\6\2\0\10\6\1\0\1\6\10\0\5\6\22\0"+
    "\1\123\5\6\2\0\4\6\2\0\10\6\1\0\1\6"+
    "\10\0\5\6\22\0\6\6\2\0\4\6\2\0\3\6"+
    "\1\124\4\6\1\0\1\6\10\0\5\6\22\0\1\125"+
    "\5\6\2\0\4\6\2\0\10\6\1\0\1\6\10\0"+
    "\5\6\22\0\6\6\2\0\1\6\1\126\2\6\2\0"+
    "\10\6\1\0\1\6\10\0\5\6\22\0\2\6\1\127"+
    "\3\6\2\0\4\6\2\0\10\6\1\0\1\6\10\0"+
    "\5\6\22\0\6\6\2\0\3\6\1\130\2\0\10\6"+
    "\1\0\1\6\10\0\5\6\22\0\6\6\2\0\3\6"+
    "\1\131\2\0\10\6\1\0\1\6\10\0\5\6\22\0"+
    "\6\6\2\0\4\6\2\0\10\6\1\0\1\132\10\0"+
    "\5\6\22\0\3\6\1\133\2\6\2\0\4\6\2\0"+
    "\10\6\1\0\1\6\10\0\5\6\22\0\3\6\1\134"+
    "\2\6\2\0\3\6\1\135\2\0\10\6\1\0\1\6"+
    "\10\0\5\6\22\0\6\6\2\0\4\6\2\0\5\6"+
    "\1\136\2\6\1\0\1\6\10\0\5\6\22\0\6\6"+
    "\2\0\4\6\2\0\10\6\1\137\1\6\10\0\5\6"+
    "\22\0\3\6\1\140\2\6\2\0\4\6\2\0\10\6"+
    "\1\0\1\6\10\0\5\6\22\0\1\141\5\6\2\0"+
    "\4\6\2\0\10\6\1\0\1\6\10\0\5\6\22\0"+
    "\6\6\2\0\1\6\1\142\2\6\2\0\10\6\1\0"+
    "\1\6\10\0\5\6\22\0\6\6\2\0\3\6\1\143"+
    "\2\0\10\6\1\0\1\6\10\0\5\6\22\0\6\6"+
    "\2\0\4\6\2\0\5\6\1\144\2\6\1\0\1\6"+
    "\10\0\5\6\22\0\4\6\1\145\1\6\2\0\4\6"+
    "\2\0\10\6\1\0\1\6\63\0\1\146\13\0\5\6"+
    "\22\0\1\147\5\6\2\0\4\6\2\0\10\6\1\0"+
    "\1\6\10\0\5\6\22\0\6\6\2\0\1\150\3\6"+
    "\2\0\10\6\1\0\1\6\41\0\1\151\35\0\5\6"+
    "\22\0\2\6\1\152\3\6\2\0\4\6\2\0\10\6"+
    "\1\0\1\6\10\0\5\6\22\0\6\6\2\0\4\6"+
    "\2\0\7\6\1\153\1\0\1\6\10\0\5\6\22\0"+
    "\1\154\5\6\2\0\4\6\2\0\10\6\1\0\1\6"+
    "\10\0\5\6\22\0\6\6\2\0\2\6\1\155\1\6"+
    "\2\0\10\6\1\0\1\6\10\0\5\6\22\0\6\6"+
    "\2\0\4\6\2\0\4\6\1\156\3\6\1\0\1\6"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\3\1\1\11\2\1\13\11"+
    "\15\1\2\11\6\1\4\11\2\0\1\1\1\0\1\1"+
    "\5\11\10\1\2\11\12\1\1\11\20\1\1\0\6\1"+
    "\1\0\2\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MbspLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MbspLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return INTEGER_LITERAL;
            } 
            // fall through
          case 65: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 66: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 67: break;
          case 4: 
            { return LBRACE;
            } 
            // fall through
          case 68: break;
          case 5: 
            { return IDENTIFIER;
            } 
            // fall through
          case 69: break;
          case 6: 
            { return DOLLAR_KEYWORD;
            } 
            // fall through
          case 70: break;
          case 7: 
            { return DOT;
            } 
            // fall through
          case 71: break;
          case 8: 
            { return COMMA;
            } 
            // fall through
          case 72: break;
          case 9: 
            { return LPARENTH;
            } 
            // fall through
          case 73: break;
          case 10: 
            { return RPARENTH;
            } 
            // fall through
          case 74: break;
          case 11: 
            { return LBRACKET;
            } 
            // fall through
          case 75: break;
          case 12: 
            { return RBRACKET;
            } 
            // fall through
          case 76: break;
          case 13: 
            { return RBRACE;
            } 
            // fall through
          case 77: break;
          case 14: 
            { return PLUS;
            } 
            // fall through
          case 78: break;
          case 15: 
            { return MINUS;
            } 
            // fall through
          case 79: break;
          case 16: 
            { return MULTIPLY;
            } 
            // fall through
          case 80: break;
          case 17: 
            { return DIVISION;
            } 
            // fall through
          case 81: break;
          case 18: 
            { return MODULO;
            } 
            // fall through
          case 82: break;
          case 19: 
            { return NEGATE;
            } 
            // fall through
          case 83: break;
          case 20: 
            { return EQ;
            } 
            // fall through
          case 84: break;
          case 21: 
            { return LESS;
            } 
            // fall through
          case 85: break;
          case 22: 
            { return GREATER;
            } 
            // fall through
          case 86: break;
          case 23: 
            { return AND;
            } 
            // fall through
          case 87: break;
          case 24: 
            { return OR;
            } 
            // fall through
          case 88: break;
          case 25: 
            { return XOR;
            } 
            // fall through
          case 89: break;
          case 26: 
            { return NOT;
            } 
            // fall through
          case 90: break;
          case 27: 
            { return AT_KEYWORD;
            } 
            // fall through
          case 91: break;
          case 28: 
            { return QUESTION;
            } 
            // fall through
          case 92: break;
          case 29: 
            { return COLON;
            } 
            // fall through
          case 93: break;
          case 30: 
            { return EXPRESSION_START;
            } 
            // fall through
          case 94: break;
          case 31: 
            { return CHARACTER_LITERAL;
            } 
            // fall through
          case 95: break;
          case 32: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 96: break;
          case 33: 
            { return NOT_EQUAL;
            } 
            // fall through
          case 97: break;
          case 34: 
            { return EQUAL;
            } 
            // fall through
          case 98: break;
          case 35: 
            { return LESS_EQUAL;
            } 
            // fall through
          case 99: break;
          case 36: 
            { return SHIFT_LEFT;
            } 
            // fall through
          case 100: break;
          case 37: 
            { return GREATER_EQUAL;
            } 
            // fall through
          case 101: break;
          case 38: 
            { return SHIFT_RIGHT;
            } 
            // fall through
          case 102: break;
          case 39: 
            { return EQ_KEYWORD;
            } 
            // fall through
          case 103: break;
          case 40: 
            { return LT_KEYWORD;
            } 
            // fall through
          case 104: break;
          case 41: 
            { return GT_KEYWORD;
            } 
            // fall through
          case 105: break;
          case 42: 
            { return AND_AND;
            } 
            // fall through
          case 106: break;
          case 43: 
            { return OR_OR;
            } 
            // fall through
          case 107: break;
          case 44: 
            { return OR_KEYWORD;
            } 
            // fall through
          case 108: break;
          case 45: 
            { return IN_KEYWORD;
            } 
            // fall through
          case 109: break;
          case 46: 
            { return DOUBLE_LITERAL;
            } 
            // fall through
          case 110: break;
          case 47: 
            { return SHIFT_RIGHT_LOGICAL;
            } 
            // fall through
          case 111: break;
          case 48: 
            { return NEQ_KEYWORD;
            } 
            // fall through
          case 112: break;
          case 49: 
            { return NEW_KEYWORD;
            } 
            // fall through
          case 113: break;
          case 50: 
            { return NOT_KEYWORD;
            } 
            // fall through
          case 114: break;
          case 51: 
            { return LT_EQ_KEYWORD;
            } 
            // fall through
          case 115: break;
          case 52: 
            { return GT_EQ_KEYWORD;
            } 
            // fall through
          case 116: break;
          case 53: 
            { return AND_KEYWORD;
            } 
            // fall through
          case 117: break;
          case 54: 
            { return BOR_KEYWORD;
            } 
            // fall through
          case 118: break;
          case 55: 
            { return XOR_KEYWORD;
            } 
            // fall through
          case 119: break;
          case 56: 
            { return SHIFT_LEFT_KEYWORD;
            } 
            // fall through
          case 120: break;
          case 57: 
            { return SHIFT_RIGHT_KEYWORD;
            } 
            // fall through
          case 121: break;
          case 58: 
            { return NULL_KEYWORD;
            } 
            // fall through
          case 122: break;
          case 59: 
            { return TRUE_KEYWORD;
            } 
            // fall through
          case 123: break;
          case 60: 
            { return BAND_KEYWORD;
            } 
            // fall through
          case 124: break;
          case 61: 
            { return SHIFT_RIGHT_LOGICAL_KEYWORD;
            } 
            // fall through
          case 125: break;
          case 62: 
            { return FALSE_KEYWORD;
            } 
            // fall through
          case 126: break;
          case 63: 
            { return NOT_IN_KEYWORD;
            } 
            // fall through
          case 127: break;
          case 64: 
            { return INSTANCEOF_KEYWORD;
            } 
            // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
