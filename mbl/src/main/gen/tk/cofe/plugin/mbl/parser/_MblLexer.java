/*
 * Copyright (C) 2019-2021 cofe
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package tk.cofe.plugin.mbl.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static tk.cofe.plugin.mbl.MblTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_MblLexer.flex</tt>
 */
public class _MblLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17616 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\34\1\35\1\36\2\24\1\37\11\24\1\40\21\24\1\41\1"+
    "\42\24\24\1\43\3\24\1\25\1\44\1\43\4\24\1\45\1\46\4\0\1\47\1\50\1\30\3\24"+
    "\2\51\1\30\1\52\1\53\1\0\1\54\5\24\1\55\2\0\1\5\1\56\1\57\13\24\1\60\1\47"+
    "\1\61\1\62\1\5\1\63\1\30\1\64\1\65\3\24\3\0\1\66\12\24\1\67\1\0\1\70\1\30"+
    "\1\5\1\71\3\24\1\55\1\72\1\23\2\24\1\67\1\73\1\74\1\75\2\30\3\24\1\76\1\24"+
    "\1\51\6\30\2\24\1\33\1\77\2\30\1\100\5\0\1\101\6\24\1\102\2\0\1\103\1\24\1"+
    "\104\1\5\1\43\1\24\1\105\1\106\1\107\2\24\1\110\1\111\1\112\1\113\1\114\1"+
    "\64\1\115\1\104\1\5\1\116\1\117\1\120\1\121\1\107\2\24\1\110\1\122\1\123\1"+
    "\124\1\125\1\126\1\127\1\130\1\5\1\131\1\30\1\120\1\40\1\37\2\24\1\110\1\132"+
    "\1\112\1\47\1\133\1\134\1\30\1\104\1\5\1\44\1\135\1\120\1\106\1\107\2\24\1"+
    "\110\1\132\1\112\1\113\1\125\1\136\1\115\1\104\1\5\1\44\1\30\1\137\1\140\1"+
    "\141\1\142\1\117\1\140\1\24\1\143\1\144\1\145\1\146\1\30\1\130\1\5\1\30\1"+
    "\44\1\147\1\33\1\110\2\24\1\110\1\24\1\150\1\151\1\145\1\152\1\51\1\104\1"+
    "\5\2\30\1\105\1\33\1\110\2\24\1\110\1\153\1\112\1\151\1\145\1\152\1\35\1\104"+
    "\1\5\1\154\1\30\1\147\1\33\1\110\4\24\1\155\1\151\1\156\1\157\1\45\1\104\1"+
    "\5\1\30\1\42\1\160\1\24\1\25\1\42\2\24\1\37\1\161\1\25\1\162\1\163\1\0\1\130"+
    "\1\5\1\164\1\30\1\43\5\24\1\165\1\166\1\167\1\170\1\5\1\171\4\30\1\172\1\173"+
    "\1\174\1\43\1\175\1\176\1\165\1\177\1\200\1\52\1\5\1\201\4\30\1\134\2\30\1"+
    "\202\1\5\1\171\1\203\1\204\1\24\1\43\3\24\1\31\1\46\1\0\1\151\1\205\1\0\1"+
    "\46\3\0\1\206\1\207\7\30\5\24\1\55\1\0\1\210\1\5\1\171\1\67\1\211\1\212\1"+
    "\213\1\214\1\24\1\215\1\216\1\5\1\217\4\24\1\40\1\22\5\24\1\220\51\24\1\141"+
    "\1\25\1\141\5\24\1\141\4\24\1\141\1\25\1\141\1\24\1\25\7\24\1\141\10\24\1"+
    "\221\4\30\2\24\2\30\12\24\2\77\1\43\114\24\1\106\2\24\1\222\2\24\1\51\11\24"+
    "\1\140\1\24\1\134\1\24\1\33\1\223\1\30\2\24\1\223\1\30\2\24\1\224\1\30\1\24"+
    "\1\33\1\225\1\30\6\24\1\226\3\0\1\227\1\230\1\5\1\171\3\30\1\231\1\5\1\171"+
    "\13\24\1\30\1\232\4\24\1\233\10\24\1\77\1\30\3\24\1\25\1\0\1\2\1\0\1\2\1\130"+
    "\1\5\3\24\1\77\1\31\1\30\5\24\1\116\3\24\1\27\1\5\1\171\4\30\2\24\1\167\1"+
    "\2\6\24\1\205\1\170\3\0\1\113\1\5\1\171\1\5\1\171\1\45\1\30\1\0\1\52\10\30"+
    "\1\234\5\24\1\226\1\0\1\234\1\116\1\5\1\171\1\30\1\235\1\2\1\30\1\236\3\24"+
    "\1\103\1\213\1\5\1\71\4\24\1\67\1\0\1\2\1\30\4\24\1\226\2\0\1\30\1\5\1\237"+
    "\1\5\1\71\3\24\1\77\1\24\1\134\10\30\1\240\2\0\1\241\1\242\1\202\30\24\7\0"+
    "\1\243\42\24\2\77\4\24\2\77\1\24\1\244\3\24\1\77\6\24\1\33\1\200\1\245\1\31"+
    "\1\246\1\116\1\24\1\31\1\245\1\31\1\247\1\250\3\30\1\251\1\30\1\45\1\134\1"+
    "\30\1\252\1\253\1\151\1\0\1\44\1\45\2\30\1\24\1\31\4\24\2\30\1\0\1\206\1\254"+
    "\1\0\1\255\1\30\1\256\1\42\1\161\1\257\1\32\1\260\1\24\1\261\1\262\1\263\2"+
    "\30\5\24\1\134\116\30\5\24\1\25\5\24\1\25\20\24\1\31\1\264\1\265\1\30\4\24"+
    "\1\40\1\22\7\24\1\45\1\30\1\64\2\24\1\25\1\30\10\25\4\0\5\30\1\45\72\30\1"+
    "\266\3\30\1\43\1\215\1\257\1\31\1\43\11\24\1\25\1\267\1\43\12\24\1\220\1\262"+
    "\4\24\1\25\1\43\12\24\1\25\2\30\3\24\1\51\6\30\170\24\1\77\11\30\75\24\1\51"+
    "\2\30\21\24\1\31\10\30\5\24\1\77\41\24\1\31\2\24\1\5\1\270\2\30\5\24\1\167"+
    "\1\100\1\271\3\24\1\67\12\24\1\202\3\30\1\45\1\24\1\42\14\24\1\107\3\24\1"+
    "\25\1\24\7\30\1\45\1\24\1\272\1\273\2\24\1\55\2\30\1\134\6\24\1\116\1\30\1"+
    "\274\5\24\1\226\1\0\1\52\1\30\1\5\1\171\2\0\1\274\1\275\1\5\1\71\2\24\1\67"+
    "\1\52\2\24\1\167\1\0\1\2\1\30\3\24\1\31\1\101\5\24\1\55\1\0\1\255\1\45\1\5"+
    "\1\171\1\276\1\24\1\5\1\277\5\24\1\103\1\170\1\30\1\273\1\300\1\5\1\171\2"+
    "\24\1\25\1\301\6\24\1\212\1\302\1\233\2\30\1\303\1\24\1\55\1\304\1\30\3\305"+
    "\1\30\2\25\5\24\1\220\1\77\1\30\16\24\1\55\1\306\1\5\1\171\64\24\1\116\1\30"+
    "\2\24\1\25\1\307\5\24\1\116\40\30\55\24\1\77\15\24\1\27\4\30\1\25\1\30\1\307"+
    "\1\310\1\24\1\110\1\25\1\200\1\311\15\24\1\27\3\30\1\307\54\24\1\77\2\30\10"+
    "\24\1\42\6\24\5\30\1\24\1\31\2\0\2\30\2\0\1\117\2\30\1\262\3\30\1\44\1\33"+
    "\20\24\1\312\1\252\1\30\1\5\1\171\1\43\2\24\1\121\1\43\2\24\1\51\1\313\12"+
    "\24\1\25\3\42\1\314\1\315\2\30\1\316\1\24\1\153\2\24\1\25\2\24\1\317\1\24"+
    "\1\77\1\24\1\77\4\30\17\24\1\51\10\30\6\24\1\31\20\30\1\320\20\30\3\24\1\31"+
    "\6\24\1\134\1\30\1\255\3\30\4\24\1\30\1\262\3\24\1\51\4\24\1\67\1\321\3\24"+
    "\1\77\4\24\1\116\1\24\1\257\5\30\23\24\1\77\1\5\1\171\4\24\1\116\4\24\1\116"+
    "\5\24\1\30\6\24\1\116\23\30\46\24\1\25\1\30\2\24\1\77\1\30\1\24\23\30\1\77"+
    "\1\110\4\24\1\40\1\322\2\24\1\77\1\30\2\24\1\25\1\30\3\24\1\25\10\30\2\24"+
    "\1\323\1\30\2\24\1\77\1\30\3\24\1\27\10\30\7\24\1\313\10\30\1\324\1\100\1"+
    "\153\1\43\2\24\1\116\1\124\4\30\3\24\1\31\3\24\1\31\4\30\1\24\1\43\2\24\1"+
    "\325\3\30\6\24\1\77\1\30\2\24\1\77\1\30\2\24\1\51\1\30\2\24\1\27\15\30\11"+
    "\24\1\134\6\30\6\24\1\51\1\30\6\24\1\51\41\30\1\236\6\24\1\0\1\170\3\30\1"+
    "\130\1\5\1\30\1\64\1\236\5\24\1\0\1\326\2\30\3\24\1\134\1\5\1\171\1\236\3"+
    "\24\1\167\1\0\1\327\1\5\2\30\4\24\1\330\1\30\1\236\5\24\1\55\1\0\1\331\1\332"+
    "\1\5\1\333\4\30\2\24\1\37\2\24\1\226\1\0\1\207\10\30\1\25\1\260\1\24\1\40"+
    "\1\24\1\134\5\24\1\167\1\0\1\321\1\5\1\171\1\147\1\106\1\107\2\24\1\110\1"+
    "\132\1\112\1\113\1\125\1\146\1\262\1\334\2\206\21\30\6\24\1\205\1\0\1\210"+
    "\1\51\1\5\1\171\4\30\6\24\2\0\1\335\1\30\1\5\1\171\24\30\5\24\1\167\1\52\1"+
    "\0\1\255\2\30\1\300\4\30\6\24\2\0\1\336\1\30\1\5\1\171\4\30\5\24\1\55\1\0"+
    "\1\30\1\5\1\171\6\30\3\24\1\337\1\0\1\2\1\5\1\171\54\30\10\24\1\5\1\171\1"+
    "\30\1\45\40\30\1\103\1\236\4\24\1\55\1\340\1\64\1\30\1\103\1\101\4\24\1\246"+
    "\1\215\1\0\1\202\4\30\7\24\1\134\40\30\1\24\1\110\3\24\1\167\1\170\1\0\1\134"+
    "\1\30\1\5\1\171\2\30\1\42\3\24\1\341\2\0\1\46\1\170\11\30\1\25\1\37\4\24\1"+
    "\342\1\343\1\216\1\30\1\0\1\202\24\30\63\24\1\27\14\30\15\24\1\25\2\30\30"+
    "\24\1\116\27\30\5\24\1\25\72\30\10\24\1\25\67\30\7\24\1\134\3\24\1\25\1\5"+
    "\1\171\14\30\3\24\1\77\1\206\1\30\6\24\1\170\1\30\1\116\1\30\1\5\1\171\1\307"+
    "\2\24\1\262\2\24\56\30\10\24\1\31\1\30\1\103\4\0\1\170\1\30\1\64\1\236\1\24"+
    "\10\30\1\27\3\30\75\24\1\31\2\30\36\24\1\51\41\30\43\24\1\25\12\30\61\24\1"+
    "\116\40\30\15\24\1\51\1\24\1\31\1\24\1\134\1\24\1\344\1\2\127\30\1\345\1\346"+
    "\2\0\1\347\1\2\3\30\1\350\22\30\1\332\67\30\12\24\1\33\10\24\1\33\1\351\1"+
    "\352\1\24\1\353\1\153\7\24\1\40\1\354\2\33\3\24\1\355\1\200\1\42\1\110\51"+
    "\24\1\77\3\24\1\110\2\24\1\220\3\24\1\220\2\24\1\33\3\24\1\33\2\24\1\25\3"+
    "\24\1\25\3\24\1\110\3\24\1\110\2\24\1\220\1\356\6\5\6\0\1\170\1\235\5\0\1"+
    "\206\1\320\1\30\1\357\2\30\1\235\1\46\1\0\52\30\1\170\2\0\1\360\1\361\1\321"+
    "\72\30\30\24\1\31\1\30\1\170\5\30\10\24\1\226\1\321\1\5\1\171\24\30\1\153"+
    "\3\24\1\172\1\43\1\220\1\362\1\256\1\363\1\172\1\244\1\172\2\220\1\127\1\24"+
    "\1\37\1\24\1\116\1\364\1\37\1\24\1\116\50\30\32\24\1\25\5\30\106\24\1\31\1"+
    "\30\33\24\1\77\120\24\1\27\1\30\146\24\1\134\3\30\3\24\1\77\74\30\1\126\3"+
    "\30\14\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 1960 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\13\1\1\1\2\2\1\1\2\6\13\4\0\1\62\1\30\1\10\1\3\1\12\1\27\1\42\1\7\1\16"+
    "\1\17\1\25\1\23\1\15\1\24\1\6\1\26\12\5\1\100\1\0\1\32\1\31\1\33\1\77\1\64"+
    "\7\11\1\75\4\11\1\76\1\73\4\11\1\74\1\70\6\11\1\20\1\0\1\21\1\50\1\11\1\0"+
    "\1\44\1\52\1\61\1\45\1\34\1\56\1\41\1\63\1\60\1\66\1\11\1\37\1\65\1\36\1\46"+
    "\1\72\1\35\1\47\1\57\1\40\1\55\1\67\1\54\1\53\1\71\1\11\1\4\1\43\1\22\1\51"+
    "\6\13\1\14\2\13\1\1\1\0\4\11\4\0\1\11\2\0\1\13\7\0\1\11\4\0\1\11\5\0\17\11"+
    "\1\0\2\11\4\0\4\11\16\0\5\11\7\0\1\11\1\0\1\11\1\0\5\11\1\0\2\11\2\0\4\11"+
    "\1\0\1\11\6\0\1\11\1\0\3\11\1\0\1\11\1\0\4\11\1\0\13\11\1\0\3\11\1\0\5\13"+
    "\2\0\6\11\1\0\7\11\1\0\1\11\15\0\1\11\1\0\15\13\1\0\1\13\1\0\2\13\1\0\2\13"+
    "\1\0\1\13\3\11\5\0\6\13\5\0\1\11\4\0\3\13\1\0\1\13\3\0\3\11\5\13\2\5\4\0\2"+
    "\11\1\13\13\11\1\0\1\11\7\13\2\11\2\13\1\0\4\13\2\11\2\5\3\11\2\0\1\11\7\0"+
    "\1\13\1\11\1\13\6\11\3\13\2\0\11\11\3\13\1\11\6\0\2\5\6\11\4\13\2\11\2\0\2"+
    "\13\1\11\11\13\1\11\3\13\1\11\5\13\2\0\1\11\3\13\4\0\6\11\6\0\10\13\6\11\3"+
    "\13\1\11\2\13\1\11\7\13\2\11\2\13\2\0\2\5\1\11\3\13\1\0\10\11\2\0\2\11\2\0"+
    "\6\11\1\0\7\11\1\0\1\11\3\0\4\11\2\0\1\13\1\11\7\13\2\0\2\13\2\0\3\13\1\11"+
    "\5\0\2\11\1\0\5\11\7\0\2\11\4\0\3\13\1\0\6\11\4\0\2\11\1\0\2\11\1\0\2\11\1"+
    "\0\2\11\2\0\1\13\1\0\5\13\4\0\2\13\2\0\3\13\3\0\1\13\7\0\4\11\1\0\1\11\7\0"+
    "\2\5\2\13\3\11\1\13\2\0\1\11\1\0\2\11\1\0\3\11\2\13\1\0\3\13\2\0\1\11\10\0"+
    "\1\11\6\13\6\0\2\13\2\0\1\13\1\11\1\0\6\11\3\0\3\11\1\0\4\11\3\0\2\11\1\0"+
    "\1\11\1\0\4\11\4\0\5\13\3\0\3\13\1\0\4\13\2\0\1\11\6\0\5\13\1\0\5\11\3\0\1"+
    "\11\7\13\1\0\2\13\5\0\2\13\1\0\4\11\1\0\3\11\1\0\2\11\5\0\3\11\2\13\1\11\3"+
    "\13\1\0\4\13\1\11\5\0\3\11\1\13\2\0\2\13\1\0\7\11\1\0\1\11\4\0\1\13\4\0\6"+
    "\13\1\0\1\13\3\0\2\13\4\0\1\11\1\13\2\11\7\13\4\0\10\11\10\13\1\0\2\5\7\0"+
    "\2\11\1\0\1\11\2\0\2\11\1\0\1\11\2\0\1\11\6\0\4\11\1\0\3\11\1\0\1\11\1\0\1"+
    "\11\2\0\2\11\1\0\3\11\2\13\1\0\2\13\1\11\2\0\5\11\1\0\1\11\1\0\2\5\2\0\4\11"+
    "\2\13\13\0\1\13\1\0\1\13\1\0\1\13\4\0\2\13\5\11\10\13\11\0\1\13\1\0\7\13\1"+
    "\11\2\13\4\11\3\13\1\11\3\13\2\11\7\13\3\11\4\13\5\11\14\13\1\11\1\13\2\5"+
    "\4\13\2\0\3\11\1\0\7\11\2\0\3\13\1\1\11\11\3\13\3\0\2\11\2\13\4\0\1\11\1\0"+
    "\2\13\4\0\4\11\10\13\3\0\1\11\3\0\2\11\1\13\5\0\4\13\1\0\5\11\2\13\2\11\1"+
    "\13\1\11\5\0\5\13\3\11\3\0\10\13\5\11\2\5\3\0\3\11\3\13\1\0\5\13\4\11\1\13"+
    "\4\11\3\13\2\11\3\13\1\0\5\13\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\1\0\6\11\2\0\2\11\13\1\5\13\2\1\5\13\1\1\4\0\1\11\12\0\1\1\1\0\1\13\3\0\4"+
    "\13\11\0\1\11\4\0\1\11\1\0\5\11\2\0\1\11\1\0\4\11\1\0\3\11\2\0\4\11\5\0\5"+
    "\11\4\0\1\11\4\0\4\11\3\13\2\11\4\0\1\1\4\0\3\11\1\0\2\13\2\0\3\11\2\5\2\11"+
    "\4\0\6\13\1\0\3\11\1\13\3\11\1\13\4\11\1\13\4\11\2\13\6\11\3\0\1\11\1\0\1"+
    "\11\2\0\5\11\1\13\2\11\2\5\5\11\1\0\4\11\2\13\4\0\1\11\3\13\2\11\1\13\5\11"+
    "\2\13\3\0\3\11\4\0\3\11\2\13\2\0\6\11\1\0\3\13\1\0\2\13\5\0\5\11\5\0\1\11"+
    "\1\13\3\11\1\0\2\11\1\0\7\11\2\0\1\13\6\0\2\11\2\0\3\11\3\0\2\11\3\0\2\11"+
    "\2\0\3\13\4\0\3\11\1\0\2\11\1\0\1\11\5\0\1\13\2\0\3\13\5\0\1\11\3\0\1\11\2"+
    "\0\4\11\1\0\2\11\2\0\1\11\3\13\1\0\2\13\1\0\5\11\2\13\1\0\3\13\2\0\1\13\2"+
    "\0\5\13\1\0\2\5\3\11\1\13\2\0\1\11\1\0\1\13\4\11\5\0\3\13\3\0\2\5\1\11\1\0"+
    "\1\11\3\0\2\11\2\13\2\0\6\13\2\11\1\0\1\11\1\13\3\0\1\11\3\0\2\11\3\0\5\13"+
    "\1\11\4\13\3\0\6\13\1\11\6\13\3\0\1\13\1\0\2\13\1\0\1\13\2\11\3\0\2\13\6\0"+
    "\5\13\3\0\6\13\2\0\3\13\2\0\4\13\4\0\1\11\2\0\2\11\2\0\4\11\1\0\4\11\1\0\1"+
    "\11\1\0\6\11\2\0\5\11\1\0\4\11\1\0\4\11\2\0\2\5\4\0\1\13\3\0\1\13\2\0\7\13"+
    "\1\0\2\13\1\0\2\13\1\0\1\11\1\0\1\11\5\0\1\11\1\0\1\11\1\0\3\11\1\0\3\11\1"+
    "\0\3\11");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\2\1\4\1\1\1\5\2\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\5\6\1\27\1\30\3\6\1\31\1\32\6\6"+
    "\1\33\2\6\1\34\1\35\1\36\2\0\1\37\1\0"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\3\6\1\50\2\6\1\51\1\52\1\53\1\6\1\54"+
    "\7\6\1\55\3\6\1\56\1\57\1\60\1\61\1\62"+
    "\2\6\1\63\2\6\1\64\1\65\2\6\1\66\1\67"+
    "\2\6\1\70\1\71\4\6\1\0\1\72\1\6\1\73"+
    "\2\6\1\74\1\75\2\6\1\76\2\6\1\0\3\6"+
    "\1\77\3\6\1\100\20\6\1\101\1\102\2\6\1\103"+
    "\4\6\1\104\2\6\1\105\1\6\1\106\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\101\0\u0104\0\101\0\u0145"+
    "\0\u0186\0\u01c7\0\u0208\0\101\0\101\0\101\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\101\0\101\0\u0249\0\u028a"+
    "\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492"+
    "\0\u04d3\0\u0514\0\u0555\0\u0596\0\101\0\101\0\u05d7\0\u0618"+
    "\0\u0659\0\u069a\0\u06db\0\u071c\0\101\0\u075d\0\u079e\0\101"+
    "\0\101\0\101\0\u07df\0\u0145\0\u0145\0\u0186\0\u0186\0\101"+
    "\0\101\0\101\0\101\0\101\0\u0820\0\u01c7\0\u0861\0\u08a2"+
    "\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7\0\101\0\101\0\u0a28"+
    "\0\u01c7\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef"+
    "\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u07df\0\101\0\u01c7\0\u01c7"+
    "\0\u0d34\0\u0d75\0\u0db6\0\u01c7\0\u0df7\0\u0e38\0\u01c7\0\u01c7"+
    "\0\u0e79\0\u0eba\0\u01c7\0\u01c7\0\u0efb\0\u0f3c\0\u01c7\0\u01c7"+
    "\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u01c7\0\u10c2\0\u01c7"+
    "\0\u1103\0\u1144\0\u01c7\0\u01c7\0\u1185\0\u11c6\0\u01c7\0\u1207"+
    "\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u01c7\0\u138d\0\u13ce"+
    "\0\u140f\0\101\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595"+
    "\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d"+
    "\0\u17de\0\u181f\0\u01c7\0\u1860\0\u18a1\0\u18e2\0\u01c7\0\u1923"+
    "\0\u1964\0\u19a5\0\u19e6\0\u01c7\0\u1a27\0\u1a68\0\u01c7\0\u1aa9"+
    "\0\u01c7\0\u01c7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\2\1\3\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\12\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\12\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\12\1\51\1\52\1\53\1\54"+
    "\1\12\1\3\1\12\1\55\1\56\1\57\10\12\1\60"+
    "\1\61\102\0\2\3\11\0\1\3\45\0\1\3\22\0"+
    "\1\62\101\0\1\6\1\63\72\0\2\64\1\0\4\64"+
    "\1\65\71\64\2\66\1\0\5\66\1\67\70\66\5\0"+
    "\1\12\3\0\4\12\17\0\6\12\2\0\4\12\2\0"+
    "\10\12\1\0\1\12\1\0\12\12\6\0\1\62\1\12"+
    "\3\0\4\12\17\0\6\12\2\0\4\12\2\0\10\12"+
    "\1\0\1\12\1\0\12\12\33\0\1\70\100\0\1\71"+
    "\100\0\1\72\1\73\77\0\1\74\1\0\1\75\52\0"+
    "\1\12\3\0\4\12\17\0\1\12\1\76\4\12\2\0"+
    "\4\12\2\0\10\12\1\0\1\12\1\0\12\12\7\0"+
    "\1\12\3\0\4\12\17\0\1\77\5\12\2\0\2\12"+
    "\1\100\1\12\2\0\3\12\1\101\4\12\1\0\1\12"+
    "\1\0\12\12\7\0\1\12\3\0\4\12\17\0\4\12"+
    "\1\102\1\12\2\0\4\12\2\0\10\12\1\0\1\12"+
    "\1\0\12\12\7\0\1\12\3\0\4\12\17\0\6\12"+
    "\2\0\3\12\1\103\2\0\10\12\1\0\1\12\1\0"+
    "\4\12\1\104\5\12\7\0\1\12\3\0\4\12\17\0"+
    "\4\12\1\105\1\12\2\0\4\12\2\0\10\12\1\0"+
    "\1\12\1\0\12\12\44\0\1\106\101\0\1\107\42\0"+
    "\1\12\3\0\4\12\17\0\2\12\1\110\3\12\2\0"+
    "\4\12\2\0\10\12\1\0\1\12\1\0\12\12\7\0"+
    "\1\12\3\0\4\12\17\0\6\12\2\0\3\12\1\111"+
    "\2\0\10\12\1\0\1\12\1\0\12\12\7\0\1\12"+
    "\3\0\4\12\17\0\1\112\5\12\2\0\4\12\2\0"+
    "\10\12\1\0\1\12\1\0\12\12\7\0\1\12\3\0"+
    "\4\12\17\0\6\12\2\0\1\113\1\12\1\114\1\12"+
    "\2\0\10\12\1\0\1\12\1\0\12\12\7\0\1\12"+
    "\3\0\4\12\17\0\6\12\2\0\2\12\1\115\1\12"+
    "\2\0\10\12\1\0\1\12\1\0\12\12\7\0\1\12"+
    "\3\0\4\12\17\0\6\12\2\0\4\12\2\0\5\12"+
    "\1\116\2\12\1\0\1\12\1\0\12\12\7\0\1\12"+
    "\3\0\4\12\17\0\6\12\2\0\1\117\3\12\2\0"+
    "\10\12\1\0\1\12\1\0\12\12\7\0\1\12\3\0"+
    "\4\12\17\0\6\12\2\0\4\12\2\0\10\12\1\0"+
    "\1\120\1\0\12\12\7\0\1\12\3\0\4\12\17\0"+
    "\2\12\1\121\3\12\2\0\4\12\2\0\10\12\1\0"+
    "\1\12\1\0\12\12\7\0\1\12\3\0\4\12\17\0"+
    "\6\12\2\0\2\12\1\122\1\12\2\0\10\12\1\0"+
    "\1\12\1\0\12\12\7\0\1\12\3\0\4\12\17\0"+
    "\6\12\2\0\1\123\1\124\2\12\2\0\10\12\1\0"+
    "\1\12\1\0\12\12\7\0\1\125\126\0\1\126\52\0"+
    "\1\12\3\0\4\12\17\0\1\12\1\127\4\12\2\0"+
    "\4\12\2\0\2\12\1\130\5\12\1\0\1\12\1\0"+
    "\12\12\7\0\1\12\3\0\4\12\17\0\4\12\1\131"+
    "\1\12\2\0\4\12\2\0\10\12\1\0\1\12\1\0"+
    "\12\12\7\0\1\12\3\0\4\12\17\0\3\12\1\132"+
    "\2\12\2\0\4\12\2\0\10\12\1\0\1\12\1\0"+
    "\1\133\11\12\7\0\1\12\3\0\4\12\17\0\1\134"+
    "\5\12\2\0\4\12\2\0\10\12\1\0\1\12\1\0"+
    "\12\12\7\0\1\12\3\0\4\12\17\0\6\12\2\0"+
    "\4\12\2\0\3\12\1\135\4\12\1\0\1\12\1\0"+
    "\12\12\7\0\1\12\3\0\4\12\17\0\6\12\2\0"+
    "\4\12\2\0\10\12\1\0\1\12\1\0\5\12\1\136"+
    "\4\12\7\0\1\12\3\0\4\12\17\0\1\137\5\12"+
    "\2\0\4\12\2\0\10\12\1\0\1\12\1\0\12\12"+
    "\7\0\1\12\3\0\4\12\17\0\6\12\2\0\1\12"+
    "\1\140\2\12\2\0\10\12\1\0\1\12\1\0\12\12"+
    "\7\0\1\12\3\0\4\12\17\0\6\12\2\0\4\12"+
    "\2\0\5\12\1\141\2\12\1\0\1\12\1\0\12\12"+
    "\7\0\1\12\3\0\4\12\17\0\2\12\1\142\3\12"+
    "\2\0\4\12\2\0\10\12\1\0\1\12\1\0\12\12"+
    "\7\0\1\12\3\0\4\12\17\0\6\12\2\0\3\12"+
    "\1\143\2\0\10\12\1\0\1\12\1\0\12\12\7\0"+
    "\1\12\3\0\4\12\17\0\6\12\2\0\3\12\1\144"+
    "\2\0\10\12\1\0\1\12\1\0\12\12\7\0\1\12"+
    "\3\0\4\12\17\0\6\12\2\0\4\12\2\0\10\12"+
    "\1\0\1\145\1\0\12\12\7\0\1\12\3\0\4\12"+
    "\17\0\3\12\1\146\2\12\2\0\4\12\2\0\10\12"+
    "\1\0\1\12\1\0\12\12\7\0\1\12\3\0\4\12"+
    "\17\0\3\12\1\147\2\12\2\0\3\12\1\150\2\0"+
    "\10\12\1\0\1\12\1\0\12\12\7\0\1\12\3\0"+
    "\4\12\17\0\6\12\2\0\4\12\2\0\5\12\1\151"+
    "\2\12\1\0\1\12\1\0\12\12\7\0\1\12\3\0"+
    "\4\12\17\0\6\12\2\0\1\12\1\152\2\12\2\0"+
    "\10\12\1\0\1\12\1\0\12\12\7\0\1\12\3\0"+
    "\4\12\17\0\6\12\2\0\4\12\2\0\10\12\1\0"+
    "\1\12\1\0\2\12\1\153\7\12\7\0\1\12\3\0"+
    "\4\12\17\0\6\12\2\0\4\12\2\0\1\154\7\12"+
    "\1\0\1\12\1\0\12\12\7\0\1\12\3\0\4\12"+
    "\17\0\6\12\2\0\4\12\2\0\10\12\1\155\1\12"+
    "\1\0\12\12\7\0\1\12\3\0\4\12\17\0\3\12"+
    "\1\156\2\12\2\0\4\12\2\0\10\12\1\0\1\12"+
    "\1\0\12\12\7\0\1\12\3\0\4\12\17\0\1\157"+
    "\5\12\2\0\4\12\2\0\10\12\1\0\1\12\1\0"+
    "\12\12\7\0\1\12\3\0\4\12\17\0\1\160\5\12"+
    "\2\0\4\12\2\0\10\12\1\0\1\12\1\0\12\12"+
    "\7\0\1\12\3\0\4\12\17\0\1\161\5\12\2\0"+
    "\4\12\2\0\10\12\1\0\1\12\1\0\12\12\7\0"+
    "\1\12\3\0\4\12\17\0\6\12\2\0\4\12\2\0"+
    "\3\12\1\162\4\12\1\0\1\12\1\0\12\12\7\0"+
    "\1\12\3\0\4\12\17\0\6\12\2\0\1\12\1\163"+
    "\2\12\2\0\10\12\1\0\1\12\1\0\12\12\7\0"+
    "\1\12\3\0\4\12\17\0\6\12\2\0\3\12\1\164"+
    "\2\0\10\12\1\0\1\12\1\0\12\12\7\0\1\12"+
    "\3\0\4\12\17\0\6\12\2\0\4\12\2\0\5\12"+
    "\1\165\2\12\1\0\1\12\1\0\12\12\7\0\1\12"+
    "\3\0\4\12\17\0\4\12\1\166\1\12\2\0\4\12"+
    "\2\0\10\12\1\0\1\12\1\0\12\12\7\0\1\12"+
    "\3\0\4\12\17\0\1\167\5\12\2\0\4\12\2\0"+
    "\10\12\1\0\1\12\1\0\12\12\7\0\1\12\3\0"+
    "\4\12\17\0\6\12\2\0\1\170\3\12\2\0\10\12"+
    "\1\0\1\12\1\0\12\12\7\0\1\12\3\0\4\12"+
    "\17\0\6\12\2\0\4\12\2\0\7\12\1\171\1\0"+
    "\1\12\1\0\12\12\62\0\1\172\25\0\1\12\3\0"+
    "\4\12\17\0\6\12\2\0\3\12\1\173\2\0\10\12"+
    "\1\0\1\12\1\0\12\12\7\0\1\12\3\0\4\12"+
    "\17\0\6\12\2\0\4\12\2\0\10\12\1\0\1\12"+
    "\1\0\10\12\1\174\1\12\7\0\1\12\3\0\4\12"+
    "\17\0\3\12\1\175\2\12\2\0\4\12\2\0\10\12"+
    "\1\0\1\12\1\0\12\12\7\0\1\12\3\0\4\12"+
    "\17\0\1\176\5\12\2\0\4\12\2\0\10\12\1\0"+
    "\1\12\1\0\12\12\7\0\1\12\3\0\4\12\17\0"+
    "\6\12\2\0\1\177\3\12\2\0\10\12\1\0\1\12"+
    "\1\0\12\12\7\0\1\12\3\0\4\12\17\0\6\12"+
    "\2\0\4\12\2\0\10\12\1\0\1\12\1\0\3\12"+
    "\1\200\6\12\7\0\1\12\3\0\4\12\17\0\6\12"+
    "\2\0\4\12\2\0\10\12\1\0\1\12\1\0\3\12"+
    "\1\201\6\12\40\0\1\202\47\0\1\12\3\0\4\12"+
    "\17\0\6\12\2\0\4\12\2\0\6\12\1\203\1\12"+
    "\1\0\1\12\1\0\12\12\7\0\1\12\3\0\4\12"+
    "\17\0\6\12\2\0\1\204\3\12\2\0\10\12\1\0"+
    "\1\12\1\0\12\12\7\0\1\12\3\0\4\12\17\0"+
    "\4\12\1\205\1\12\2\0\4\12\2\0\10\12\1\0"+
    "\1\12\1\0\12\12\7\0\1\12\3\0\4\12\17\0"+
    "\2\12\1\206\3\12\2\0\4\12\2\0\10\12\1\0"+
    "\1\12\1\0\12\12\7\0\1\12\3\0\4\12\17\0"+
    "\6\12\2\0\4\12\2\0\10\12\1\0\1\12\1\0"+
    "\4\12\1\207\5\12\7\0\1\12\3\0\4\12\17\0"+
    "\6\12\2\0\4\12\2\0\10\12\1\0\1\12\1\0"+
    "\4\12\1\210\5\12\7\0\1\12\3\0\4\12\17\0"+
    "\6\12\2\0\4\12\2\0\7\12\1\211\1\0\1\12"+
    "\1\0\12\12\7\0\1\12\3\0\4\12\17\0\2\12"+
    "\1\212\3\12\2\0\4\12\2\0\10\12\1\0\1\12"+
    "\1\0\12\12\7\0\1\12\3\0\4\12\17\0\6\12"+
    "\2\0\4\12\2\0\10\12\1\0\1\12\1\0\11\12"+
    "\1\213\7\0\1\12\3\0\4\12\17\0\6\12\2\0"+
    "\4\12\2\0\7\12\1\214\1\0\1\12\1\0\12\12"+
    "\7\0\1\12\3\0\4\12\17\0\6\12\2\0\4\12"+
    "\2\0\10\12\1\0\1\12\1\0\5\12\1\215\4\12"+
    "\7\0\1\12\3\0\4\12\17\0\6\12\2\0\4\12"+
    "\2\0\10\12\1\0\1\12\1\0\5\12\1\216\4\12"+
    "\7\0\1\12\3\0\4\12\17\0\6\12\2\0\4\12"+
    "\2\0\10\12\1\0\1\12\1\0\7\12\1\217\2\12"+
    "\7\0\1\12\3\0\4\12\17\0\6\12\2\0\1\12"+
    "\1\220\2\12\2\0\10\12\1\0\1\12\1\0\12\12"+
    "\7\0\1\12\3\0\4\12\17\0\6\12\2\0\1\221"+
    "\3\12\2\0\10\12\1\0\1\12\1\0\12\12\7\0"+
    "\1\12\3\0\4\12\17\0\1\222\5\12\2\0\4\12"+
    "\2\0\10\12\1\0\1\12\1\0\12\12\7\0\1\12"+
    "\3\0\4\12\17\0\1\223\5\12\2\0\4\12\2\0"+
    "\10\12\1\0\1\12\1\0\12\12\7\0\1\12\3\0"+
    "\4\12\17\0\1\224\5\12\2\0\4\12\2\0\10\12"+
    "\1\0\1\12\1\0\12\12\7\0\1\12\3\0\4\12"+
    "\17\0\6\12\2\0\4\12\2\0\7\12\1\225\1\0"+
    "\1\12\1\0\12\12\7\0\1\12\3\0\4\12\17\0"+
    "\3\12\1\226\2\12\2\0\4\12\2\0\10\12\1\0"+
    "\1\12\1\0\12\12\7\0\1\12\3\0\4\12\17\0"+
    "\6\12\2\0\4\12\2\0\10\12\1\0\1\12\1\0"+
    "\5\12\1\227\4\12\7\0\1\12\3\0\4\12\17\0"+
    "\6\12\2\0\2\12\1\230\1\12\2\0\10\12\1\0"+
    "\1\12\1\0\12\12\7\0\1\12\3\0\4\12\17\0"+
    "\6\12\2\0\4\12\2\0\10\12\1\0\1\12\1\0"+
    "\6\12\1\231\3\12\7\0\1\12\3\0\4\12\17\0"+
    "\6\12\2\0\1\232\3\12\2\0\10\12\1\0\1\12"+
    "\1\0\12\12\7\0\1\12\3\0\4\12\17\0\1\233"+
    "\5\12\2\0\4\12\2\0\10\12\1\0\1\12\1\0"+
    "\12\12\7\0\1\12\3\0\4\12\17\0\6\12\2\0"+
    "\4\12\2\0\4\12\1\234\3\12\1\0\1\12\1\0"+
    "\12\12\7\0\1\12\3\0\4\12\17\0\6\12\2\0"+
    "\1\235\3\12\2\0\10\12\1\0\1\12\1\0\12\12"+
    "\7\0\1\12\3\0\4\12\17\0\3\12\1\236\2\12"+
    "\2\0\4\12\2\0\10\12\1\0\1\12\1\0\12\12"+
    "\7\0\1\12\3\0\4\12\17\0\6\12\2\0\3\12"+
    "\1\237\2\0\10\12\1\0\1\12\1\0\12\12\7\0"+
    "\1\12\3\0\4\12\17\0\6\12\2\0\4\12\2\0"+
    "\10\12\1\0\1\12\1\0\1\240\11\12\7\0\1\12"+
    "\3\0\4\12\17\0\1\241\5\12\2\0\4\12\2\0"+
    "\10\12\1\0\1\12\1\0\12\12\7\0\1\12\3\0"+
    "\4\12\17\0\1\242\5\12\2\0\4\12\2\0\10\12"+
    "\1\0\1\12\1\0\12\12\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6890];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\1\1\1\11\4\1\13\11"+
    "\16\1\2\11\6\1\1\11\2\1\3\11\2\0\1\1"+
    "\1\0\1\1\5\11\11\1\2\11\16\1\1\11\26\1"+
    "\1\0\14\1\1\0\7\1\1\11\40\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MblLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MblLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return INTEGER_LITERAL;
            } 
            // fall through
          case 72: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 73: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 74: break;
          case 4: 
            { return LBRACE;
            } 
            // fall through
          case 75: break;
          case 5: 
            { return DOT;
            } 
            // fall through
          case 76: break;
          case 6: 
            { return IDENTIFIER;
            } 
            // fall through
          case 77: break;
          case 7: 
            { return DOLLAR_KEYWORD;
            } 
            // fall through
          case 78: break;
          case 8: 
            { return COMMA;
            } 
            // fall through
          case 79: break;
          case 9: 
            { return LPARENTH;
            } 
            // fall through
          case 80: break;
          case 10: 
            { return RPARENTH;
            } 
            // fall through
          case 81: break;
          case 11: 
            { return LBRACKET;
            } 
            // fall through
          case 82: break;
          case 12: 
            { return RBRACKET;
            } 
            // fall through
          case 83: break;
          case 13: 
            { return RBRACE;
            } 
            // fall through
          case 84: break;
          case 14: 
            { return PLUS;
            } 
            // fall through
          case 85: break;
          case 15: 
            { return MINUS;
            } 
            // fall through
          case 86: break;
          case 16: 
            { return MULTIPLY;
            } 
            // fall through
          case 87: break;
          case 17: 
            { return DIVISION;
            } 
            // fall through
          case 88: break;
          case 18: 
            { return MODULO;
            } 
            // fall through
          case 89: break;
          case 19: 
            { return NEGATE;
            } 
            // fall through
          case 90: break;
          case 20: 
            { return EQ;
            } 
            // fall through
          case 91: break;
          case 21: 
            { return LESS;
            } 
            // fall through
          case 92: break;
          case 22: 
            { return GREATER;
            } 
            // fall through
          case 93: break;
          case 23: 
            { return AND;
            } 
            // fall through
          case 94: break;
          case 24: 
            { return OR;
            } 
            // fall through
          case 95: break;
          case 25: 
            { return XOR;
            } 
            // fall through
          case 96: break;
          case 26: 
            { return NOT;
            } 
            // fall through
          case 97: break;
          case 27: 
            { return AT_KEYWORD;
            } 
            // fall through
          case 98: break;
          case 28: 
            { return QUESTION;
            } 
            // fall through
          case 99: break;
          case 29: 
            { return COLON;
            } 
            // fall through
          case 100: break;
          case 30: 
            { return EXPRESSION_START;
            } 
            // fall through
          case 101: break;
          case 31: 
            { return CHARACTER_LITERAL;
            } 
            // fall through
          case 102: break;
          case 32: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 103: break;
          case 33: 
            { return NOT_EQUAL;
            } 
            // fall through
          case 104: break;
          case 34: 
            { return EQUAL;
            } 
            // fall through
          case 105: break;
          case 35: 
            { return LESS_EQUAL;
            } 
            // fall through
          case 106: break;
          case 36: 
            { return SHIFT_LEFT;
            } 
            // fall through
          case 107: break;
          case 37: 
            { return GREATER_EQUAL;
            } 
            // fall through
          case 108: break;
          case 38: 
            { return SHIFT_RIGHT;
            } 
            // fall through
          case 109: break;
          case 39: 
            { return EQ_KEYWORD;
            } 
            // fall through
          case 110: break;
          case 40: 
            { return LT_KEYWORD;
            } 
            // fall through
          case 111: break;
          case 41: 
            { return GT_KEYWORD;
            } 
            // fall through
          case 112: break;
          case 42: 
            { return AND_AND;
            } 
            // fall through
          case 113: break;
          case 43: 
            { return OR_OR;
            } 
            // fall through
          case 114: break;
          case 44: 
            { return OR_KEYWORD;
            } 
            // fall through
          case 115: break;
          case 45: 
            { return IN_KEYWORD;
            } 
            // fall through
          case 116: break;
          case 46: 
            { return DOUBLE_LITERAL;
            } 
            // fall through
          case 117: break;
          case 47: 
            { return SHIFT_RIGHT_LOGICAL;
            } 
            // fall through
          case 118: break;
          case 48: 
            { return NEQ_KEYWORD;
            } 
            // fall through
          case 119: break;
          case 49: 
            { return NEW_KEYWORD;
            } 
            // fall through
          case 120: break;
          case 50: 
            { return NOT_KEYWORD;
            } 
            // fall through
          case 121: break;
          case 51: 
            { return LT_EQ_KEYWORD;
            } 
            // fall through
          case 122: break;
          case 52: 
            { return GT_EQ_KEYWORD;
            } 
            // fall through
          case 123: break;
          case 53: 
            { return AND_KEYWORD;
            } 
            // fall through
          case 124: break;
          case 54: 
            { return BOR_KEYWORD;
            } 
            // fall through
          case 125: break;
          case 55: 
            { return XOR_KEYWORD;
            } 
            // fall through
          case 126: break;
          case 56: 
            { return SHIFT_LEFT_KEYWORD;
            } 
            // fall through
          case 127: break;
          case 57: 
            { return SHIFT_RIGHT_KEYWORD;
            } 
            // fall through
          case 128: break;
          case 58: 
            { return NULL_KEYWORD;
            } 
            // fall through
          case 129: break;
          case 59: 
            { return TRUE_KEYWORD;
            } 
            // fall through
          case 130: break;
          case 60: 
            { return BAND_KEYWORD;
            } 
            // fall through
          case 131: break;
          case 61: 
            { return SHIFT_RIGHT_LOGICAL_KEYWORD;
            } 
            // fall through
          case 132: break;
          case 62: 
            { return MODE_KEYWORD;
            } 
            // fall through
          case 133: break;
          case 63: 
            { return FALSE_KEYWORD;
            } 
            // fall through
          case 134: break;
          case 64: 
            { return NOT_IN_KEYWORD;
            } 
            // fall through
          case 135: break;
          case 65: 
            { return JAVA_TYPE_KEYWORD;
            } 
            // fall through
          case 136: break;
          case 66: 
            { return JDBC_TYPE_KEYWORD;
            } 
            // fall through
          case 137: break;
          case 67: 
            { return RESULT_MAP_KEYWORD;
            } 
            // fall through
          case 138: break;
          case 68: 
            { return INSTANCEOF_KEYWORD;
            } 
            // fall through
          case 139: break;
          case 69: 
            { return TYPE_HANDLER_KEYWORD;
            } 
            // fall through
          case 140: break;
          case 70: 
            { return NUMERIC_SCALE_KEYWORD;
            } 
            // fall through
          case 141: break;
          case 71: 
            { return JDBC_TYPE_KEYWORD_NAME;
            } 
            // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
